
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Feb 17 20:14:05 PST 2017
//----------------------------------------------------

package coop.rchain.syntax.rholang;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Feb 17 20:14:05 PST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\004\000\002\002\013\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\005" +
    "\000\002\004\004\000\002\004\004\000\002\004\003\000" +
    "\002\005\007\000\002\005\003\000\002\006\012\000\002" +
    "\006\012\000\002\006\011\000\002\006\006\000\002\006" +
    "\006\000\002\006\006\000\002\006\006\000\002\006\003" +
    "\000\002\007\005\000\002\007\003\000\002\010\003\000" +
    "\002\010\005\000\002\011\003\000\002\011\004\000\002" +
    "\012\005\000\002\012\007\000\002\013\003\000\002\013" +
    "\005\000\002\014\007\000\002\015\003\000\002\015\004" +
    "\000\002\016\010\000\002\017\003\000\002\017\004\000" +
    "\002\020\003\000\002\020\003\000\002\021\003\000\002" +
    "\021\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\023\006\000\002\024\003\000\002\025\003" +
    "\000\002\025\003\000\002\026\002\000\002\026\003\000" +
    "\002\026\005\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\005\000\002\030\004\000\002\030" +
    "\004\000\002\030\003\000\002\031\007\000\002\031\003" +
    "\000\002\032\011\000\002\032\006\000\002\032\006\000" +
    "\002\032\006\000\002\032\003\000\002\033\005\000\002" +
    "\033\003\000\002\034\002\000\002\034\003\000\002\034" +
    "\005\000\002\035\003\000\002\035\004\000\002\036\002" +
    "\000\002\036\003\000\002\036\005\000\002\037\005\000" +
    "\002\040\003\000\002\040\005\000\002\041\007\000\002" +
    "\042\003\000\002\042\004\000\002\043\006\000\002\044" +
    "\003\000\002\044\005\000\002\045\003\000\002\045\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\004\031\004\001\002\000\004\045\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\004\010\001\002\000\012\005\uffbb\022\013\026" +
    "\012\046\015\001\002\000\006\005\uffba\021\275\001\002" +
    "\000\026\005\uffd4\010\uffd4\013\uffd4\020\uffd4\021\uffd4\023" +
    "\uffd4\024\uffd4\025\uffd4\034\uffd4\040\uffd4\001\002\000\016" +
    "\004\115\011\114\012\113\026\012\027\105\046\103\001" +
    "\002\000\004\005\017\001\002\000\026\005\uffd5\010\uffd5" +
    "\013\uffd5\020\uffd5\021\uffd5\023\uffd5\024\uffd5\025\uffd5\034" +
    "\uffd5\040\uffd5\001\002\000\024\005\uffbd\010\uffbd\013\uffbd" +
    "\020\uffbd\021\uffbd\023\uffbd\024\uffbd\025\uffbd\040\uffbd\001" +
    "\002\000\004\006\020\001\002\000\004\007\021\001\002" +
    "\000\044\004\046\011\044\012\043\014\041\016\040\022" +
    "\033\027\030\032\053\035\052\036\051\037\047\041\023" +
    "\042\042\043\022\044\034\045\027\046\025\001\002\000" +
    "\030\005\uffdc\010\uffdc\013\uffdc\015\uffdc\017\uffdc\020\uffdc" +
    "\021\uffdc\024\uffdc\025\uffdc\033\uffdc\040\uffdc\001\002\000" +
    "\030\005\uffd6\010\uffd6\013\uffd6\015\uffd6\017\uffd6\020\uffd6" +
    "\021\uffd6\024\uffd6\025\uffd6\033\uffd6\040\uffd6\001\002\000" +
    "\030\005\uffd8\010\uffd8\013\uffd8\015\uffd8\017\uffd8\020\uffd8" +
    "\021\uffd8\024\uffd8\025\uffd8\033\uffd8\040\uffd8\001\002\000" +
    "\030\005\ufffd\007\256\010\ufffd\013\uffea\015\ufffd\017\ufffd" +
    "\020\ufffd\021\ufffd\024\ufffd\025\ufffd\040\ufffd\001\002\000" +
    "\004\013\267\001\002\000\004\004\264\001\002\000\030" +
    "\005\uffff\010\uffff\013\uffff\015\uffff\017\uffff\020\uffff\021" +
    "\uffff\024\uffff\025\uffff\033\uffff\040\uffff\001\002\000\030" +
    "\005\ufff9\010\ufff9\013\ufff9\015\ufff9\017\ufff9\020\ufff9\021" +
    "\ufff9\024\ufff9\025\ufff9\033\ufff9\040\ufff9\001\002\000\024" +
    "\005\ufff7\010\ufff7\015\ufff7\017\ufff7\020\ufff7\021\ufff7\024" +
    "\ufff7\025\ufff7\040\ufff7\001\002\000\024\004\046\011\044" +
    "\012\043\027\030\041\023\042\042\043\022\044\034\046" +
    "\255\001\002\000\030\005\uffdb\010\uffdb\013\uffdb\015\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\024\uffdb\025\uffdb\033\uffdb\040" +
    "\uffdb\001\002\000\024\005\uffef\010\uffef\015\uffef\017\uffef" +
    "\020\uffef\021\uffef\024\uffef\025\uffef\040\uffef\001\002\000" +
    "\030\005\uffde\010\uffde\013\uffde\015\uffde\017\uffde\020\uffde" +
    "\021\uffde\024\uffde\025\uffde\033\uffde\040\uffde\001\002\000" +
    "\024\005\uffed\010\uffed\015\uffed\017\uffed\020\uffed\021\uffed" +
    "\024\uffed\025\uffed\040\uffed\001\002\000\010\022\013\026" +
    "\012\046\015\001\002\000\010\022\013\026\012\046\015" +
    "\001\002\000\030\005\uffda\010\uffda\013\uffda\015\uffda\017" +
    "\uffda\020\uffda\021\uffda\024\uffda\025\uffda\033\uffda\040\uffda" +
    "\001\002\000\006\022\033\046\066\001\002\000\006\022" +
    "\033\046\066\001\002\000\030\005\uffd9\010\uffd9\013\uffd9" +
    "\015\uffd9\017\uffd9\020\uffd9\021\uffd9\024\uffd9\025\uffd9\033" +
    "\uffd9\040\uffd9\001\002\000\044\004\046\011\044\012\043" +
    "\014\041\016\040\022\033\027\030\032\053\035\052\036" +
    "\051\037\047\041\023\042\042\043\022\044\034\045\027" +
    "\046\025\001\002\000\004\007\217\001\002\000\006\010" +
    "\216\020\071\001\002\000\004\046\211\001\002\000\044" +
    "\004\046\011\044\012\043\014\041\016\040\022\033\027" +
    "\030\032\053\035\052\036\051\037\047\041\023\042\042" +
    "\043\022\044\034\045\027\046\025\001\002\000\004\004" +
    "\056\001\002\000\030\005\ufffe\010\ufffe\013\ufffe\015\ufffe" +
    "\017\ufffe\020\ufffe\021\ufffe\024\ufffe\025\ufffe\033\ufffe\040" +
    "\ufffe\001\002\000\030\005\uffdd\010\uffdd\013\uffdd\015\uffdd" +
    "\017\uffdd\020\uffdd\021\uffdd\024\uffdd\025\uffdd\033\uffdd\040" +
    "\uffdd\001\002\000\010\022\013\026\012\046\015\001\002" +
    "\000\004\005\073\001\002\000\004\023\064\001\002\000" +
    "\010\005\uffe6\024\062\025\uffe6\001\002\000\010\022\013" +
    "\026\012\046\015\001\002\000\006\005\uffe5\025\uffe5\001" +
    "\002\000\006\022\033\046\066\001\002\000\016\005\uffe8" +
    "\015\uffe8\017\uffe8\024\uffe8\025\uffe8\033\067\001\002\000" +
    "\030\005\uffea\010\uffea\013\uffea\015\uffea\017\uffea\020\uffea" +
    "\021\uffea\024\uffea\025\uffea\033\uffea\040\uffea\001\002\000" +
    "\044\004\046\011\044\012\043\014\041\016\040\022\033" +
    "\027\030\032\053\035\052\036\051\037\047\041\023\042" +
    "\042\043\022\044\034\045\027\046\025\001\002\000\016" +
    "\005\uffe7\015\uffe7\017\uffe7\020\071\024\uffe7\025\uffe7\001" +
    "\002\000\044\004\046\011\044\012\043\014\041\016\040" +
    "\022\033\027\030\032\053\035\052\036\051\037\047\041" +
    "\023\042\042\043\022\044\034\045\027\046\025\001\002" +
    "\000\024\005\uffee\010\uffee\015\uffee\017\uffee\020\uffee\021" +
    "\uffee\024\uffee\025\uffee\040\uffee\001\002\000\004\007\074" +
    "\001\002\000\044\004\046\011\044\012\043\014\041\016" +
    "\040\022\033\027\030\032\053\035\052\036\051\037\047" +
    "\041\023\042\042\043\022\044\034\045\027\046\025\001" +
    "\002\000\006\010\076\020\071\001\002\000\024\005\ufff4" +
    "\010\ufff4\015\ufff4\017\ufff4\020\ufff4\021\ufff4\024\ufff4\025" +
    "\ufff4\040\ufff4\001\002\000\006\020\071\040\100\001\002" +
    "\000\030\004\115\011\114\012\113\022\013\026\012\027" +
    "\105\032\122\035\120\036\117\045\104\046\103\001\002" +
    "\000\052\004\115\005\uffe3\010\uffe3\011\114\012\113\015" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\022\013\024\uffe3\025\uffe3" +
    "\026\012\027\105\032\122\035\120\036\117\040\uffe3\045" +
    "\104\046\103\001\002\000\020\005\uffd0\010\uffd0\013\uffbd" +
    "\020\uffd0\021\uffd0\025\uffd0\040\uffd0\001\002\000\026\005" +
    "\uffd5\007\204\010\uffd5\013\uffd5\020\uffd5\021\uffd5\023\uffd5" +
    "\024\uffd5\025\uffd5\040\uffd5\001\002\000\004\004\201\001" +
    "\002\000\024\005\uffcf\010\uffcf\013\uffcf\020\uffcf\021\uffcf" +
    "\023\uffcf\024\uffcf\025\uffcf\040\uffcf\001\002\000\004\013" +
    "\172\001\002\000\024\005\uffca\010\uffca\013\uffca\020\uffca" +
    "\021\uffca\023\uffca\024\uffca\025\uffca\040\uffca\001\002\000" +
    "\016\005\uffc8\010\uffc8\020\uffc8\021\uffc8\025\uffc8\040\uffc8" +
    "\001\002\000\016\005\uffc3\010\uffc3\020\uffc3\021\uffc3\025" +
    "\uffc3\040\uffc3\001\002\000\016\005\uffc1\010\uffc1\020\uffc1" +
    "\021\uffc1\025\uffc1\040\uffc1\001\002\000\010\022\013\026" +
    "\012\046\015\001\002\000\010\022\013\026\012\046\015" +
    "\001\002\000\030\004\115\011\114\012\113\022\013\026" +
    "\012\027\105\032\122\035\120\036\117\045\104\046\103" +
    "\001\002\000\024\005\uffce\010\uffce\013\uffce\020\uffce\021" +
    "\uffce\023\uffce\024\uffce\025\uffce\040\uffce\001\002\000\010" +
    "\026\012\034\uffd3\046\015\001\002\000\030\004\115\011" +
    "\114\012\113\022\013\026\012\027\105\032\122\035\120" +
    "\036\117\045\104\046\103\001\002\000\024\005\ufff2\010" +
    "\ufff2\015\ufff2\017\ufff2\020\ufff2\021\ufff2\024\ufff2\025\ufff2" +
    "\040\ufff2\001\002\000\004\004\132\001\002\000\006\020" +
    "\125\025\124\001\002\000\004\007\127\001\002\000\030" +
    "\004\115\011\114\012\113\022\013\026\012\027\105\032" +
    "\122\035\120\036\117\045\104\046\103\001\002\000\016" +
    "\005\uffc2\010\uffc2\020\uffc2\021\uffc2\025\uffc2\040\uffc2\001" +
    "\002\000\044\004\046\011\044\012\043\014\041\016\040" +
    "\022\033\027\030\032\053\035\052\036\051\037\047\041" +
    "\023\042\042\043\022\044\034\045\027\046\025\001\002" +
    "\000\006\010\131\020\071\001\002\000\052\004\uffe4\005" +
    "\uffe4\010\uffe4\011\uffe4\012\uffe4\015\uffe4\017\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\032" +
    "\uffe4\035\uffe4\036\uffe4\040\uffe4\045\uffe4\046\uffe4\001\002" +
    "\000\010\022\013\026\012\046\015\001\002\000\004\005" +
    "\142\001\002\000\004\023\140\001\002\000\006\005\uffb7" +
    "\024\136\001\002\000\010\022\013\026\012\046\015\001" +
    "\002\000\004\005\uffb6\001\002\000\010\022\013\026\012" +
    "\046\015\001\002\000\006\005\uffb8\024\uffb8\001\002\000" +
    "\004\007\143\001\002\000\030\004\115\011\114\012\113" +
    "\022\013\026\012\027\105\032\122\035\120\036\117\045" +
    "\104\046\103\001\002\000\006\010\145\020\125\001\002" +
    "\000\016\005\uffc7\010\uffc7\020\uffc7\021\uffc7\025\uffc7\040" +
    "\uffc7\001\002\000\006\020\125\040\147\001\002\000\030" +
    "\004\115\011\114\012\113\022\013\026\012\027\105\032" +
    "\122\035\120\036\117\045\104\046\103\001\002\000\044" +
    "\004\115\005\uffb4\010\uffb4\011\114\012\113\020\uffb4\021" +
    "\uffb4\022\013\025\uffb4\026\012\027\105\032\122\035\120" +
    "\036\117\040\uffb4\045\104\046\103\001\002\000\006\020" +
    "\125\025\153\001\002\000\016\005\uffc6\010\uffc6\020\uffc6" +
    "\021\uffc6\025\uffc6\040\uffc6\001\002\000\004\007\154\001" +
    "\002\000\030\004\115\011\114\012\113\022\013\026\012" +
    "\027\105\032\122\035\120\036\117\045\104\046\103\001" +
    "\002\000\006\010\156\020\125\001\002\000\044\004\uffb5" +
    "\005\uffb5\010\uffb5\011\uffb5\012\uffb5\020\uffb5\021\uffb5\022" +
    "\uffb5\025\uffb5\026\uffb5\027\uffb5\032\uffb5\035\uffb5\036\uffb5" +
    "\040\uffb5\045\uffb5\046\uffb5\001\002\000\016\005\uffb3\010" +
    "\uffb3\020\uffb3\021\uffb3\025\uffb3\040\uffb3\001\002\000\004" +
    "\034\164\001\002\000\006\021\162\034\uffd2\001\002\000" +
    "\010\026\012\034\uffd3\046\015\001\002\000\004\034\uffd1" +
    "\001\002\000\030\004\115\011\114\012\113\022\013\026" +
    "\012\027\105\032\122\035\120\036\117\045\104\046\103" +
    "\001\002\000\016\005\uffc5\010\uffc5\020\uffc5\021\uffc5\025" +
    "\uffc5\040\uffc5\001\002\000\006\005\167\020\125\001\002" +
    "\000\024\005\uffcd\010\uffcd\013\uffcd\020\uffcd\021\uffcd\023" +
    "\uffcd\024\uffcd\025\uffcd\040\uffcd\001\002\000\024\005\uffcc" +
    "\010\uffcc\013\uffcc\020\uffcc\021\uffcc\023\uffcc\024\uffcc\025" +
    "\uffcc\040\uffcc\001\002\000\024\005\uffcb\010\uffcb\013\uffcb" +
    "\020\uffcb\021\uffcb\023\uffcb\024\uffcb\025\uffcb\040\uffcb\001" +
    "\002\000\004\004\173\001\002\000\032\004\115\005\uffc0" +
    "\011\114\012\113\022\013\026\012\027\105\032\122\035" +
    "\120\036\117\045\104\046\103\001\002\000\004\005\200" +
    "\001\002\000\012\005\uffbf\010\uffbf\020\125\021\176\001" +
    "\002\000\034\004\115\005\uffc0\010\uffc0\011\114\012\113" +
    "\022\013\026\012\027\105\032\122\035\120\036\117\045" +
    "\104\046\103\001\002\000\006\005\uffbe\010\uffbe\001\002" +
    "\000\016\005\uffc9\010\uffc9\020\uffc9\021\uffc9\025\uffc9\040" +
    "\uffc9\001\002\000\032\004\115\005\uffc0\011\114\012\113" +
    "\022\013\026\012\027\105\032\122\035\120\036\117\045" +
    "\104\046\103\001\002\000\004\005\203\001\002\000\016" +
    "\005\uffc4\010\uffc4\020\uffc4\021\uffc4\025\uffc4\040\uffc4\001" +
    "\002\000\032\004\115\010\uffc0\011\114\012\113\022\013" +
    "\026\012\027\105\032\122\035\120\036\117\045\104\046" +
    "\103\001\002\000\004\010\206\001\002\000\024\005\uffb2" +
    "\010\uffb2\013\uffb2\020\uffb2\021\uffb2\023\uffb2\024\uffb2\025" +
    "\uffb2\040\uffb2\001\002\000\024\005\uffe2\010\uffe2\015\uffe2" +
    "\017\uffe2\020\uffe2\021\uffe2\024\uffe2\025\uffe2\040\uffe2\001" +
    "\002\000\004\034\214\001\002\000\006\021\212\034\uffb1" +
    "\001\002\000\004\046\211\001\002\000\004\034\uffb0\001" +
    "\002\000\044\004\046\011\044\012\043\014\041\016\040" +
    "\022\033\027\030\032\053\035\052\036\051\037\047\041" +
    "\023\042\042\043\022\044\034\045\027\046\025\001\002" +
    "\000\024\005\ufff1\010\ufff1\015\ufff1\017\ufff1\020\ufff1\021" +
    "\ufff1\024\ufff1\025\ufff1\040\ufff1\001\002\000\004\002\000" +
    "\001\002\000\004\030\221\001\002\000\004\010\231\001" +
    "\002\000\010\022\013\026\012\046\015\001\002\000\006" +
    "\010\uffe0\030\221\001\002\000\004\010\uffdf\001\002\000" +
    "\004\025\225\001\002\000\004\007\226\001\002\000\044" +
    "\004\046\011\044\012\043\014\041\016\040\022\033\027" +
    "\030\032\053\035\052\036\051\037\047\041\023\042\042" +
    "\043\022\044\034\045\027\046\025\001\002\000\006\010" +
    "\230\020\071\001\002\000\006\010\uffe1\030\uffe1\001\002" +
    "\000\024\005\ufff3\010\ufff3\015\ufff3\017\ufff3\020\ufff3\021" +
    "\ufff3\024\ufff3\025\ufff3\040\ufff3\001\002\000\006\005\233" +
    "\020\071\001\002\000\030\005\ufffc\010\ufffc\013\ufffc\015" +
    "\ufffc\017\ufffc\020\ufffc\021\ufffc\024\ufffc\025\ufffc\033\ufffc" +
    "\040\ufffc\001\002\000\030\005\ufffb\010\ufffb\013\ufffb\015" +
    "\ufffb\017\ufffb\020\ufffb\021\ufffb\024\ufffb\025\ufffb\033\ufffb" +
    "\040\ufffb\001\002\000\030\005\ufffa\010\ufffa\013\ufffa\015" +
    "\ufffa\017\ufffa\020\ufffa\021\ufffa\024\ufffa\025\ufffa\033\ufffa" +
    "\040\ufffa\001\002\000\004\015\237\001\002\000\010\022" +
    "\013\026\012\046\015\001\002\000\004\005\241\001\002" +
    "\000\004\007\242\001\002\000\044\004\046\011\044\012" +
    "\043\014\041\016\040\022\033\027\030\032\053\035\052" +
    "\036\051\037\047\041\023\042\042\043\022\044\034\045" +
    "\027\046\025\001\002\000\006\010\244\020\071\001\002" +
    "\000\024\005\ufff6\010\ufff6\015\ufff6\017\ufff6\020\ufff6\021" +
    "\ufff6\024\ufff6\025\ufff6\040\ufff6\001\002\000\004\017\246" +
    "\001\002\000\010\022\013\026\012\046\015\001\002\000" +
    "\004\005\250\001\002\000\004\007\251\001\002\000\044" +
    "\004\046\011\044\012\043\014\041\016\040\022\033\027" +
    "\030\032\053\035\052\036\051\037\047\041\023\042\042" +
    "\043\022\044\034\045\027\046\025\001\002\000\006\010" +
    "\253\020\071\001\002\000\024\005\ufff5\010\ufff5\015\ufff5" +
    "\017\ufff5\020\ufff5\021\ufff5\024\ufff5\025\ufff5\040\ufff5\001" +
    "\002\000\030\005\uffe9\010\uffe9\013\uffe9\015\uffe9\017\uffe9" +
    "\020\uffe9\021\uffe9\024\uffe9\025\uffe9\033\uffe9\040\uffe9\001" +
    "\002\000\032\005\ufffd\007\256\010\ufffd\013\ufffd\015\ufffd" +
    "\017\ufffd\020\ufffd\021\ufffd\024\ufffd\025\ufffd\033\ufffd\040" +
    "\ufffd\001\002\000\044\004\046\011\044\012\043\014\041" +
    "\016\040\022\033\027\030\032\053\035\052\036\051\037" +
    "\047\041\023\042\042\043\022\044\034\045\027\046\025" +
    "\001\002\000\004\010\263\001\002\000\012\005\uffec\010" +
    "\uffec\020\071\021\261\001\002\000\044\004\046\011\044" +
    "\012\043\014\041\016\040\022\033\027\030\032\053\035" +
    "\052\036\051\037\047\041\023\042\042\043\022\044\034" +
    "\045\027\046\025\001\002\000\006\005\uffeb\010\uffeb\001" +
    "\002\000\030\005\uffd7\010\uffd7\013\uffd7\015\uffd7\017\uffd7" +
    "\020\uffd7\021\uffd7\024\uffd7\025\uffd7\033\uffd7\040\uffd7\001" +
    "\002\000\044\004\046\011\044\012\043\014\041\016\040" +
    "\022\033\027\030\032\053\035\052\036\051\037\047\041" +
    "\023\042\042\043\022\044\034\045\027\046\025\001\002" +
    "\000\004\005\266\001\002\000\024\005\ufff0\010\ufff0\015" +
    "\ufff0\017\ufff0\020\ufff0\021\ufff0\024\ufff0\025\ufff0\040\ufff0" +
    "\001\002\000\004\004\270\001\002\000\044\004\046\011" +
    "\044\012\043\014\041\016\040\022\033\027\030\032\053" +
    "\035\052\036\051\037\047\041\023\042\042\043\022\044" +
    "\034\045\027\046\025\001\002\000\004\005\272\001\002" +
    "\000\024\005\ufff8\010\ufff8\015\ufff8\017\ufff8\020\ufff8\021" +
    "\ufff8\024\ufff8\025\ufff8\040\ufff8\001\002\000\024\005\uffd0" +
    "\010\uffd0\013\uffd0\020\uffd0\021\uffd0\023\uffd0\024\uffd0\025" +
    "\uffd0\040\uffd0\001\002\000\024\005\uffbc\010\uffbc\013\uffbc" +
    "\020\uffbc\021\uffbc\023\uffbc\024\uffbc\025\uffbc\040\uffbc\001" +
    "\002\000\012\005\uffbb\022\013\026\012\046\015\001\002" +
    "\000\004\005\uffb9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\025\015\035\010\036\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\025\272\027\106\030\273\043\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\030" +
    "\004\031\005\034\006\036\007\047\011\025\020\053\021" +
    "\035\022\054\023\044\024\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\030\004\253\020" +
    "\053\021\035\022\054\023\044\024\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\244\025\015\035\057\001\001\000\010" +
    "\012\235\025\015\035\057\001\001\000\002\001\001\000" +
    "\004\011\234\001\001\000\004\011\233\001\001\000\002" +
    "\001\001\000\030\003\030\004\031\005\034\006\036\007" +
    "\231\011\025\020\053\021\035\022\054\023\044\024\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\207\001\001\000\030\003\030\004\031\005\034\006\036" +
    "\007\076\011\025\020\053\021\035\022\054\023\044\024" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\060\013\056\025\015\035\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\060\013\062\025\015\035\057\001\001\000" +
    "\002\001\001\000\004\011\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\030\004\031\005\034\006" +
    "\036\007\067\011\025\020\053\021\035\022\054\023\044" +
    "\024\023\001\001\000\002\001\001\000\026\003\030\004" +
    "\031\005\034\006\071\011\025\020\053\021\035\022\054" +
    "\023\044\024\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\030\004\031\005\034\006\036\007\074" +
    "\011\025\020\053\021\035\022\054\023\044\024\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\014\100\015\120\025\101\027\106\030\107\031" +
    "\110\032\111\033\122\035\105\043\115\001\001\000\026" +
    "\014\100\015\206\025\101\027\106\030\107\031\110\032" +
    "\111\033\122\035\105\043\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\015\035\170\001" +
    "\001\000\006\025\015\035\167\001\001\000\022\025\101" +
    "\027\106\030\107\031\110\032\111\033\165\035\105\043" +
    "\115\001\001\000\002\001\001\000\006\025\160\026\157" +
    "\001\001\000\022\025\101\027\106\030\107\031\110\032" +
    "\111\033\145\035\105\043\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\025\101\027\106\030\107\031\110\032\125\035\105" +
    "\043\115\001\001\000\002\001\001\000\030\003\030\004" +
    "\031\005\034\006\036\007\127\011\025\020\053\021\035" +
    "\022\054\023\044\024\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\025\015\035\133\037\134\040\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\025\015\035\133\037\134\040\136\001\001" +
    "\000\002\001\001\000\006\025\015\035\140\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\025\101\027\106" +
    "\030\107\031\110\032\111\033\143\035\105\043\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\025\101\027\106\030\107\031\110\032\111\033" +
    "\150\035\105\041\147\042\151\043\115\001\001\000\026" +
    "\025\101\027\106\030\107\031\110\032\111\033\150\035" +
    "\105\041\147\042\156\043\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\025\101\027" +
    "\106\030\107\031\110\032\111\033\154\035\105\043\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\025\160" +
    "\026\162\001\001\000\002\001\001\000\020\025\101\027" +
    "\106\030\107\031\110\032\164\035\105\043\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\025\101\027\106\030\107\031\110\032\111\033\174\034" +
    "\173\035\105\043\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\025\101\027\106\030\107\031\110\032" +
    "\111\033\174\034\176\035\105\043\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\025\101\027\106\030" +
    "\107\031\110\032\111\033\174\034\201\035\105\043\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\025" +
    "\101\027\106\030\107\031\110\032\111\033\174\034\204" +
    "\035\105\043\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\212\001\001\000\002\001\001\000\026\003" +
    "\030\004\031\005\034\006\214\011\025\020\053\021\035" +
    "\022\054\023\044\024\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\221\017\217\001\001\000\002" +
    "\001\001\000\012\012\060\013\223\025\015\035\057\001" +
    "\001\000\006\016\221\017\222\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\030\004" +
    "\031\005\034\006\036\007\226\011\025\020\053\021\035" +
    "\022\054\023\044\024\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\237\025\015\035\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\030\004\031\005" +
    "\034\006\036\007\242\011\025\020\053\021\035\022\054" +
    "\023\044\024\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\246\025\015\035\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
    "\030\004\031\005\034\006\036\007\251\011\025\020\053" +
    "\021\035\022\054\023\044\024\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\003\030\004\031\005\034\006\036\007\257\010" +
    "\256\011\025\020\053\021\035\022\054\023\044\024\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\003" +
    "\030\004\031\005\034\006\036\007\257\010\261\011\025" +
    "\020\053\021\035\022\054\023\044\024\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\003\030\004\031" +
    "\005\034\006\036\007\257\010\264\011\025\020\053\021" +
    "\035\022\054\023\044\024\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\003\030\004" +
    "\031\005\034\006\036\007\257\010\270\011\025\020\053" +
    "\021\035\022\054\023\044\024\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\025\015\035\010\036\275\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public coop.rchain.syntax.rholang.Absyn.Contr pContr() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (coop.rchain.syntax.rholang.Absyn.Contr) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ListName ::= Name _SYMB_13 ListName 
            {
              coop.rchain.syntax.rholang.Absyn.ListName RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListName p_3 = (coop.rchain.syntax.rholang.Absyn.ListName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListName",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ListName ::= Name 
            {
              coop.rchain.syntax.rholang.Absyn.ListName RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListName(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListName",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ListVar ::= Var _SYMB_13 ListVar 
            {
              coop.rchain.syntax.rholang.Absyn.ListVar RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListVar p_3 = (coop.rchain.syntax.rholang.Absyn.ListVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVar",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ListVar ::= Var 
            {
              coop.rchain.syntax.rholang.Absyn.ListVar RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListVar(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVar",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ValPattern ::= Var _SYMB_3 ListPPattern _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtStruct(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ListPatternPatternMatch ::= PatternPatternMatch ListPatternPatternMatch 
            {
              coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PatternPatternMatch p_1 = (coop.rchain.syntax.rholang.Absyn.PatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch p_2 = (coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternPatternMatch",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ListPatternPatternMatch ::= PatternPatternMatch 
            {
              coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PatternPatternMatch p_1 = (coop.rchain.syntax.rholang.Absyn.PatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternPatternMatch",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PatternPatternMatch ::= PPattern _SYMB_17 _SYMB_3 PPattern _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.PatternPatternMatch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.PPattern p_4 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PtBranch(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PatternPatternMatch",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ListPatternBind ::= PatternBind _SYMB_16 ListPatternBind 
            {
              coop.rchain.syntax.rholang.Absyn.ListPatternBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PatternBind p_1 = (coop.rchain.syntax.rholang.Absyn.PatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListPatternBind p_3 = (coop.rchain.syntax.rholang.Absyn.ListPatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternBind",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ListPatternBind ::= PatternBind 
            {
              coop.rchain.syntax.rholang.Absyn.ListPatternBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PatternBind p_1 = (coop.rchain.syntax.rholang.Absyn.PatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPatternBind(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternBind",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PatternBind ::= CPattern _SYMB_15 CPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PatternBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.CPattern p_3 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PtBind(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PatternBind",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ListCPattern ::= CPattern _SYMB_13 ListCPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListCPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListCPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListCPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCPattern",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ListCPattern ::= CPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListCPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListCPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCPattern",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ListCPattern ::= 
            {
              coop.rchain.syntax.rholang.Absyn.ListCPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListCPattern(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCPattern",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CPattern ::= _SYMB_14 PPattern3 
            {
              coop.rchain.syntax.rholang.Absyn.CPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_2 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CPtQuote(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CPattern",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CPattern ::= VarPattern 
            {
              coop.rchain.syntax.rholang.Absyn.CPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.VarPattern p_1 = (coop.rchain.syntax.rholang.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CPtVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CPattern",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ListPPattern ::= PPattern _SYMB_13 ListPPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListPPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPPattern",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ListPPattern ::= PPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListPPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPPattern",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ListPPattern ::= 
            {
              coop.rchain.syntax.rholang.Absyn.ListPPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPPattern(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPPattern",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PPattern ::= PPattern1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PPattern ::= PPattern _SYMB_12 PPattern1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.PPattern p_3 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtPar(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PPattern1 ::= PPattern2 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PPattern1 ::= Name _SYMB_0 ListPPattern _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtConstr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PPattern1 ::= _SYMB_26 ListVarPattern _SYMB_24 PPattern1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListVarPattern p_2 = (coop.rchain.syntax.rholang.Absyn.ListVarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.PPattern p_4 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtNew(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PPattern1 ::= _SYMB_25 PPattern _SYMB_28 ListPatternPatternMatch 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_2 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch p_4 = (coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtMatch(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PPattern1 ::= _SYMB_22 _SYMB_0 ListPatternBind _SYMB_1 _SYMB_3 PPattern _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListPatternBind p_3 = (coop.rchain.syntax.rholang.Absyn.ListPatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.PPattern p_6 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtInput(p_3,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PPattern2 ::= PPattern3 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern2",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PPattern2 ::= CPattern _SYMB_7 _SYMB_0 ListPPattern _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_4 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtOutput(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern2",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PPattern3 ::= PPattern4 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern3",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PPattern3 ::= _SYMB_6 CPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_2 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtInject(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern3",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PPattern3 ::= _SYMB_5 CPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_2 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtDrop(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern3",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PPattern4 ::= _SYMB_0 PPattern _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_2 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern4",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PPattern4 ::= ValPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ValPattern p_1 = (coop.rchain.syntax.rholang.Absyn.ValPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtVal(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern4",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PPattern4 ::= _SYMB_19 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtNil(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern4",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PPattern4 ::= VarPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.VarPattern p_1 = (coop.rchain.syntax.rholang.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern4",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ListVarPattern ::= VarPattern _SYMB_13 ListVarPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListVarPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.VarPattern p_1 = (coop.rchain.syntax.rholang.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListVarPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListVarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVarPattern",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ListVarPattern ::= VarPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListVarPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.VarPattern p_1 = (coop.rchain.syntax.rholang.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListVarPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVarPattern",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ListVarPattern ::= 
            {
              coop.rchain.syntax.rholang.Absyn.ListVarPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListVarPattern(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVarPattern",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VarPattern ::= _SYMB_18 
            {
              coop.rchain.syntax.rholang.Absyn.VarPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VarPtWild(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarPattern",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VarPattern ::= Var 
            {
              coop.rchain.syntax.rholang.Absyn.VarPattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VarPtVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarPattern",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Collect ::= _STRING_ 
            {
              coop.rchain.syntax.rholang.Absyn.Collect RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CString(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Collect",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Struct ::= Var _SYMB_3 ListProc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Struct RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		coop.rchain.syntax.rholang.Absyn.ListProc p_3 = (coop.rchain.syntax.rholang.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.StructConstr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Struct",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Entity ::= Collect 
            {
              coop.rchain.syntax.rholang.Absyn.Entity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Collect p_1 = (coop.rchain.syntax.rholang.Absyn.Collect)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ECollect(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Entity ::= Struct 
            {
              coop.rchain.syntax.rholang.Absyn.Entity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Struct p_1 = (coop.rchain.syntax.rholang.Absyn.Struct)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.EStruct(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Entity ::= _CHAR_ 
            {
              coop.rchain.syntax.rholang.Absyn.Entity RESULT =null;
		Character p_1 = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.EChar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Quantity ::= _DOUBLE_ 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QDouble(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Quantity ::= _INTEGER_ 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Value ::= Entity 
            {
              coop.rchain.syntax.rholang.Absyn.Value RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Entity p_1 = (coop.rchain.syntax.rholang.Absyn.Entity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VEnt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Value",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Value ::= Quantity 
            {
              coop.rchain.syntax.rholang.Absyn.Value RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VQuant(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Value",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ListCBranch ::= CBranch ListCBranch 
            {
              coop.rchain.syntax.rholang.Absyn.ListCBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CBranch p_1 = (coop.rchain.syntax.rholang.Absyn.CBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		coop.rchain.syntax.rholang.Absyn.ListCBranch p_2 = (coop.rchain.syntax.rholang.Absyn.ListCBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCBranch",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ListCBranch ::= CBranch 
            {
              coop.rchain.syntax.rholang.Absyn.ListCBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CBranch p_1 = (coop.rchain.syntax.rholang.Absyn.CBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListCBranch(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCBranch",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CBranch ::= _SYMB_20 ListBind _SYMB_17 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.CBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListBind p_2 = (coop.rchain.syntax.rholang.Absyn.ListBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_5 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.Choice(p_2,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CBranch",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ListPMBranch ::= PMBranch ListPMBranch 
            {
              coop.rchain.syntax.rholang.Absyn.ListPMBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PMBranch p_1 = (coop.rchain.syntax.rholang.Absyn.PMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		coop.rchain.syntax.rholang.Absyn.ListPMBranch p_2 = (coop.rchain.syntax.rholang.Absyn.ListPMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPMBranch",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ListPMBranch ::= PMBranch 
            {
              coop.rchain.syntax.rholang.Absyn.ListPMBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PMBranch p_1 = (coop.rchain.syntax.rholang.Absyn.PMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPMBranch(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPMBranch",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PMBranch ::= PPattern _SYMB_17 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.PMBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_4 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PatternMatch(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PMBranch",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ListBind ::= Bind _SYMB_16 ListBind 
            {
              coop.rchain.syntax.rholang.Absyn.ListBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Bind p_1 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListBind p_3 = (coop.rchain.syntax.rholang.Absyn.ListBind)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListBind",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ListBind ::= Bind 
            {
              coop.rchain.syntax.rholang.Absyn.ListBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Bind p_1 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListBind(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListBind",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Bind ::= CPattern _SYMB_15 Chan _SYMB_23 Proc 
            {
              coop.rchain.syntax.rholang.Absyn.Bind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Chan p_3 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_5 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CondInputBind(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bind",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Bind ::= CPattern _SYMB_15 Chan 
            {
              coop.rchain.syntax.rholang.Absyn.Bind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Chan p_3 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.InputBind(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bind",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Chan ::= _SYMB_14 Proc3 
            {
              coop.rchain.syntax.rholang.Absyn.Chan RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_2 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CQuote(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Chan",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Chan ::= Var 
            {
              coop.rchain.syntax.rholang.Absyn.Chan RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Chan",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ListProc ::= Proc _SYMB_13 ListProc 
            {
              coop.rchain.syntax.rholang.Absyn.ListProc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListProc p_3 = (coop.rchain.syntax.rholang.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListProc",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ListProc ::= Proc 
            {
              coop.rchain.syntax.rholang.Absyn.ListProc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListProc(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListProc",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Proc ::= Proc1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Proc ::= Proc _SYMB_12 Proc1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_3 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPar(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Proc1 ::= Proc2 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Proc1 ::= Name _SYMB_0 ListProc _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		coop.rchain.syntax.rholang.Absyn.ListProc p_3 = (coop.rchain.syntax.rholang.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PConstr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Proc1 ::= _SYMB_26 ListVar _SYMB_24 Proc1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListVar p_2 = (coop.rchain.syntax.rholang.Absyn.ListVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_4 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PNew(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Proc1 ::= _SYMB_25 Proc _SYMB_28 ListPMBranch 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_2 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListPMBranch p_4 = (coop.rchain.syntax.rholang.Absyn.ListPMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PMatch(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Proc1 ::= _SYMB_27 _SYMB_3 ListCBranch _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListCBranch p_3 = (coop.rchain.syntax.rholang.Absyn.ListCBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PChoice(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Proc1 ::= _SYMB_22 _SYMB_0 ListBind _SYMB_1 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListBind p_3 = (coop.rchain.syntax.rholang.Absyn.ListBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_6 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PInput(p_3,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Proc1 ::= _SYMB_10 Bind _SYMB_11 Bind _SYMB_1 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Bind p_2 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		coop.rchain.syntax.rholang.Absyn.Bind p_4 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_7 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PFoldR(p_2,p_4,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Proc1 ::= _SYMB_8 Bind _SYMB_9 Bind _SYMB_1 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Bind p_2 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		coop.rchain.syntax.rholang.Absyn.Bind p_4 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_7 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PFoldL(p_2,p_4,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Proc2 ::= Proc3 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc2",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Proc2 ::= Chan _SYMB_7 _SYMB_0 ListProc _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Chan p_1 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.ListProc p_4 = (coop.rchain.syntax.rholang.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PLift(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc2",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Proc3 ::= Proc4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc3",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Proc3 ::= _SYMB_6 Chan 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Chan p_2 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PInject(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc3",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Proc3 ::= _SYMB_5 Chan 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Chan p_2 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PDrop(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc3",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Proc4 ::= _SYMB_0 Proc _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_2 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc4",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Proc4 ::= Var 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc4",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Proc4 ::= Value 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Value p_1 = (coop.rchain.syntax.rholang.Absyn.Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PValue(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc4",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Proc4 ::= _SYMB_19 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PNil(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc4",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Contr ::= _SYMB_21 Name _SYMB_0 ListCPattern _SYMB_1 _SYMB_2 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Contr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		coop.rchain.syntax.rholang.Absyn.ListCPattern p_4 = (coop.rchain.syntax.rholang.Absyn.ListCPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_8 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.DContr(p_2,p_4,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Contr",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Contr EOF 
            {
              Object RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Contr start_val = (coop.rchain.syntax.rholang.Absyn.Contr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

