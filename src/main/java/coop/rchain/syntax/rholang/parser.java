
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Feb 21 12:18:42 PST 2017
//----------------------------------------------------

package coop.rchain.syntax.rholang;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Feb 21 12:18:42 PST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\002\004\000\002\002\013\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\005" +
    "\000\002\004\004\000\002\004\004\000\002\004\003\000" +
    "\002\005\007\000\002\005\003\000\002\006\012\000\002" +
    "\006\012\000\002\006\011\000\002\006\006\000\002\006" +
    "\006\000\002\006\006\000\002\006\006\000\002\006\003" +
    "\000\002\007\005\000\002\007\003\000\002\010\003\000" +
    "\002\010\005\000\002\011\003\000\002\011\004\000\002" +
    "\012\005\000\002\012\007\000\002\013\003\000\002\013" +
    "\005\000\002\014\007\000\002\015\003\000\002\015\004" +
    "\000\002\016\010\000\002\017\003\000\002\017\004\000" +
    "\002\020\003\000\002\020\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\022\003\000\002\022" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\005\000\002\024\006\000\002\025\003\000" +
    "\002\026\003\000\002\026\003\000\002\027\002\000\002" +
    "\027\003\000\002\027\005\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\005\000\002\031\004" +
    "\000\002\031\004\000\002\031\003\000\002\032\007\000" +
    "\002\032\003\000\002\033\011\000\002\033\006\000\002" +
    "\033\006\000\002\033\006\000\002\033\003\000\002\034" +
    "\005\000\002\034\003\000\002\035\002\000\002\035\003" +
    "\000\002\035\005\000\002\036\003\000\002\036\004\000" +
    "\002\036\003\000\002\037\002\000\002\037\003\000\002" +
    "\037\005\000\002\040\005\000\002\041\003\000\002\041" +
    "\005\000\002\042\007\000\002\043\003\000\002\043\004" +
    "\000\002\044\006\000\002\044\005\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\045\003\000\002\045\005\000\002\046" +
    "\003\000\002\046\005\000\002\047\003\000\002\047\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\314\000\004\033\005\001\002\000\004\002\316\001" +
    "\002\000\004\051\006\001\002\000\004\004\007\001\002" +
    "\000\026\005\uffb6\022\021\026\016\030\015\034\014\043" +
    "\010\045\020\047\022\050\023\052\024\001\002\000\026" +
    "\005\uffab\010\uffab\013\uffab\020\uffab\021\uffab\023\uffab\024" +
    "\uffab\025\uffab\027\uffab\044\uffab\001\002\000\026\005\uffb9" +
    "\010\uffb9\013\uffb9\020\uffb9\021\uffb9\023\uffb9\024\uffb9\025" +
    "\uffb9\027\uffb9\044\uffb9\001\002\000\006\005\uffb5\021\314" +
    "\001\002\000\026\005\uffb7\010\uffb7\013\uffb7\020\uffb7\021" +
    "\uffb7\023\uffb7\024\uffb7\025\uffb7\027\uffb7\044\uffb7\001\002" +
    "\000\026\005\uffaa\010\uffaa\013\uffaa\020\uffaa\021\uffaa\023" +
    "\uffaa\024\uffaa\025\uffaa\027\uffaa\044\uffaa\001\002\000\030" +
    "\005\uffd0\010\uffd0\013\uffd0\020\uffd0\021\uffd0\023\uffd0\024" +
    "\uffd0\025\uffd0\027\uffd0\037\uffd0\044\uffd0\001\002\000\046" +
    "\004\041\011\037\012\036\022\021\026\016\027\uffbc\030" +
    "\015\031\045\034\014\035\044\040\043\041\040\043\010" +
    "\045\020\047\022\050\023\051\030\052\024\001\002\000" +
    "\004\005\127\001\002\000\026\005\uffa7\010\uffa7\013\uffa7" +
    "\020\uffa7\021\uffa7\023\uffa7\024\uffa7\025\uffa7\027\uffa7\044" +
    "\uffa7\001\002\000\032\004\041\011\037\012\036\026\016" +
    "\030\015\031\045\034\014\043\010\045\020\047\022\050" +
    "\023\052\024\001\002\000\026\005\uffa9\010\uffa9\013\uffa9" +
    "\020\uffa9\021\uffa9\023\uffa9\024\uffa9\025\uffa9\027\uffa9\044" +
    "\uffa9\001\002\000\026\005\uffa8\010\uffa8\013\uffa8\020\uffa8" +
    "\021\uffa8\023\uffa8\024\uffa8\025\uffa8\027\uffa8\044\uffa8\001" +
    "\002\000\030\005\uffd1\007\025\010\uffd1\013\uffd1\020\uffd1" +
    "\021\uffd1\023\uffd1\024\uffd1\025\uffd1\027\uffd1\044\uffd1\001" +
    "\002\000\046\004\041\010\uffbc\011\037\012\036\022\021" +
    "\026\016\030\015\031\045\034\014\035\044\040\043\041" +
    "\040\043\010\045\020\047\022\050\023\051\030\052\024" +
    "\001\002\000\004\010\123\001\002\000\022\005\uffcc\010" +
    "\uffcc\013\uffb9\020\uffcc\021\uffcc\025\uffcc\027\uffcc\044\uffcc" +
    "\001\002\000\004\004\120\001\002\000\004\013\114\001" +
    "\002\000\026\005\uffc6\010\uffc6\013\uffc6\020\uffc6\021\uffc6" +
    "\023\uffc6\024\uffc6\025\uffc6\027\uffc6\044\uffc6\001\002\000" +
    "\020\005\uffc4\010\uffc4\020\uffc4\021\uffc4\025\uffc4\027\uffc4" +
    "\044\uffc4\001\002\000\020\005\uffbf\010\uffbf\020\uffbf\021" +
    "\uffbf\025\uffbf\027\uffbf\044\uffbf\001\002\000\020\005\uffbd" +
    "\010\uffbd\020\uffbd\021\uffbd\025\uffbd\027\uffbd\044\uffbd\001" +
    "\002\000\024\022\021\026\016\030\015\034\014\043\010" +
    "\045\020\047\022\050\023\052\024\001\002\000\024\022" +
    "\021\026\016\030\015\034\014\043\010\045\020\047\022" +
    "\050\023\052\024\001\002\000\010\030\015\037\uffcf\052" +
    "\104\001\002\000\044\004\041\011\037\012\036\022\021" +
    "\026\016\030\015\031\045\034\014\035\044\040\043\041" +
    "\040\043\010\045\020\047\022\050\023\051\030\052\024" +
    "\001\002\000\022\005\uffca\010\uffca\013\uffb7\020\uffca\021" +
    "\uffca\025\uffca\027\uffca\044\uffca\001\002\000\044\004\041" +
    "\011\037\012\036\022\021\026\016\030\015\031\045\034" +
    "\014\035\044\040\043\041\040\043\010\045\020\047\022" +
    "\050\023\051\030\052\024\001\002\000\004\004\053\001" +
    "\002\000\026\005\uffcb\010\uffcb\013\uffcb\020\uffcb\021\uffcb" +
    "\023\uffcb\024\uffcb\025\uffcb\027\uffcb\044\uffcb\001\002\000" +
    "\014\005\uffbb\010\uffbb\020\050\021\047\027\uffbb\001\002" +
    "\000\052\004\041\005\uffbc\010\uffbc\011\037\012\036\022" +
    "\021\026\016\027\uffbc\030\015\031\045\034\014\035\044" +
    "\040\043\041\040\043\010\045\020\047\022\050\023\051" +
    "\030\052\024\001\002\000\044\004\041\011\037\012\036" +
    "\022\021\026\016\030\015\031\045\034\014\035\044\040" +
    "\043\041\040\043\010\045\020\047\022\050\023\051\030" +
    "\052\024\001\002\000\020\005\uffbe\010\uffbe\020\uffbe\021" +
    "\uffbe\025\uffbe\027\uffbe\044\uffbe\001\002\000\010\005\uffba" +
    "\010\uffba\027\uffba\001\002\000\024\022\021\026\016\030" +
    "\015\034\014\043\010\045\020\047\022\050\023\052\024" +
    "\001\002\000\004\023\065\001\002\000\006\005\uffb2\024" +
    "\063\001\002\000\004\005\057\001\002\000\004\007\060" +
    "\001\002\000\044\004\041\011\037\012\036\022\021\026" +
    "\016\030\015\031\045\034\014\035\044\040\043\041\040" +
    "\043\010\045\020\047\022\050\023\051\030\052\024\001" +
    "\002\000\006\010\062\020\050\001\002\000\020\005\uffc3" +
    "\010\uffc3\020\uffc3\021\uffc3\025\uffc3\027\uffc3\044\uffc3\001" +
    "\002\000\024\022\021\026\016\030\015\034\014\043\010" +
    "\045\020\047\022\050\023\052\024\001\002\000\004\005" +
    "\uffb1\001\002\000\024\022\021\026\016\030\015\034\014" +
    "\043\010\045\020\047\022\050\023\052\024\001\002\000" +
    "\006\005\uffb3\024\uffb3\001\002\000\006\020\050\044\070" +
    "\001\002\000\044\004\041\011\037\012\036\022\021\026" +
    "\016\030\015\031\045\034\014\035\044\040\043\041\040" +
    "\043\010\045\020\047\022\050\023\051\030\052\024\001" +
    "\002\000\062\004\041\005\uffaf\010\uffaf\011\037\012\036" +
    "\020\uffaf\021\uffaf\022\021\025\uffaf\026\016\027\uffaf\030" +
    "\015\031\045\034\014\035\044\040\043\041\040\043\010" +
    "\044\uffaf\045\020\047\022\050\023\051\030\052\024\001" +
    "\002\000\006\020\050\025\074\001\002\000\020\005\uffc2" +
    "\010\uffc2\020\uffc2\021\uffc2\025\uffc2\027\uffc2\044\uffc2\001" +
    "\002\000\004\007\075\001\002\000\044\004\041\011\037" +
    "\012\036\022\021\026\016\030\015\031\045\034\014\035" +
    "\044\040\043\041\040\043\010\045\020\047\022\050\023" +
    "\051\030\052\024\001\002\000\006\010\077\020\050\001" +
    "\002\000\062\004\uffb0\005\uffb0\010\uffb0\011\uffb0\012\uffb0" +
    "\020\uffb0\021\uffb0\022\uffb0\025\uffb0\026\uffb0\027\uffb0\030" +
    "\uffb0\031\uffb0\034\uffb0\035\uffb0\040\uffb0\041\uffb0\043\uffb0" +
    "\044\uffb0\045\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\001" +
    "\002\000\020\005\uffae\010\uffae\020\uffae\021\uffae\025\uffae" +
    "\027\uffae\044\uffae\001\002\000\006\005\102\020\050\001" +
    "\002\000\026\005\uffc9\010\uffc9\013\uffc9\020\uffc9\021\uffc9" +
    "\023\uffc9\024\uffc9\025\uffc9\027\uffc9\044\uffc9\001\002\000" +
    "\004\037\110\001\002\000\006\021\uffd1\037\uffd1\001\002" +
    "\000\006\021\106\037\uffce\001\002\000\010\030\015\037" +
    "\uffcf\052\104\001\002\000\004\037\uffcd\001\002\000\044" +
    "\004\041\011\037\012\036\022\021\026\016\030\015\031" +
    "\045\034\014\035\044\040\043\041\040\043\010\045\020" +
    "\047\022\050\023\051\030\052\024\001\002\000\020\005" +
    "\uffc1\010\uffc1\020\uffc1\021\uffc1\025\uffc1\027\uffc1\044\uffc1" +
    "\001\002\000\026\005\uffc8\010\uffc8\013\uffc8\020\uffc8\021" +
    "\uffc8\023\uffc8\024\uffc8\025\uffc8\027\uffc8\044\uffc8\001\002" +
    "\000\026\005\uffc7\010\uffc7\013\uffc7\020\uffc7\021\uffc7\023" +
    "\uffc7\024\uffc7\025\uffc7\027\uffc7\044\uffc7\001\002\000\004" +
    "\004\115\001\002\000\046\004\041\005\uffbc\011\037\012" +
    "\036\022\021\026\016\030\015\031\045\034\014\035\044" +
    "\040\043\041\040\043\010\045\020\047\022\050\023\051" +
    "\030\052\024\001\002\000\004\005\117\001\002\000\020" +
    "\005\uffc5\010\uffc5\020\uffc5\021\uffc5\025\uffc5\027\uffc5\044" +
    "\uffc5\001\002\000\046\004\041\005\uffbc\011\037\012\036" +
    "\022\021\026\016\030\015\031\045\034\014\035\044\040" +
    "\043\041\040\043\010\045\020\047\022\050\023\051\030" +
    "\052\024\001\002\000\004\005\122\001\002\000\020\005" +
    "\uffc0\010\uffc0\020\uffc0\021\uffc0\025\uffc0\027\uffc0\044\uffc0" +
    "\001\002\000\026\005\uffad\010\uffad\013\uffad\020\uffad\021" +
    "\uffad\023\uffad\024\uffad\025\uffad\027\uffad\044\uffad\001\002" +
    "\000\026\005\uffcc\010\uffcc\013\uffcc\020\uffcc\021\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\027\uffcc\044\uffcc\001\002\000\026" +
    "\005\uffca\010\uffca\013\uffca\020\uffca\021\uffca\023\uffca\024" +
    "\uffca\025\uffca\027\uffca\044\uffca\001\002\000\026\005\uffb8" +
    "\010\uffb8\013\uffb8\020\uffb8\021\uffb8\023\uffb8\024\uffb8\025" +
    "\uffb8\027\uffb8\044\uffb8\001\002\000\004\006\130\001\002" +
    "\000\004\007\131\001\002\000\052\004\162\011\156\012" +
    "\155\014\153\016\152\022\146\026\142\031\167\034\166" +
    "\035\165\040\163\041\160\042\136\043\135\045\133\046" +
    "\154\047\132\050\145\051\141\052\137\001\002\000\032" +
    "\005\uffdb\010\uffdb\013\uffdb\015\uffdb\017\uffdb\020\uffdb\021" +
    "\uffdb\024\uffdb\025\uffdb\027\uffdb\036\uffdb\044\uffdb\001\002" +
    "\000\032\005\uffd2\010\uffd2\013\uffd2\015\uffd2\017\uffd2\020" +
    "\uffd2\021\uffd2\024\uffd2\025\uffd2\027\uffd2\036\uffd2\044\uffd2" +
    "\001\002\000\032\005\uffd5\010\uffd5\013\uffd5\015\uffd5\017" +
    "\uffd5\020\uffd5\021\uffd5\024\uffd5\025\uffd5\027\uffd5\036\uffd5" +
    "\044\uffd5\001\002\000\032\005\uffd9\010\uffd9\013\uffd9\015" +
    "\uffd9\017\uffd9\020\uffd9\021\uffd9\024\uffd9\025\uffd9\027\uffd9" +
    "\036\uffd9\044\uffd9\001\002\000\004\007\277\001\002\000" +
    "\032\005\ufffd\007\260\010\ufffd\013\uffea\015\ufffd\017\ufffd" +
    "\020\ufffd\021\ufffd\024\ufffd\025\ufffd\027\ufffd\044\ufffd\001" +
    "\002\000\004\013\273\001\002\000\004\004\270\001\002" +
    "\000\052\004\162\011\156\012\155\014\153\016\152\022" +
    "\146\026\142\031\167\034\166\035\165\040\163\041\160" +
    "\042\136\043\135\045\133\046\154\047\132\050\145\051" +
    "\141\052\137\001\002\000\032\005\ufff9\010\ufff9\013\ufff9" +
    "\015\ufff9\017\ufff9\020\ufff9\021\ufff9\024\ufff9\025\ufff9\027" +
    "\ufff9\036\ufff9\044\ufff9\001\002\000\026\005\ufff7\010\ufff7" +
    "\015\ufff7\017\ufff7\020\ufff7\021\ufff7\024\ufff7\025\ufff7\027" +
    "\ufff7\044\ufff7\001\002\000\032\005\uffda\010\uffda\013\uffda" +
    "\015\uffda\017\uffda\020\uffda\021\uffda\024\uffda\025\uffda\027" +
    "\uffda\036\uffda\044\uffda\001\002\000\032\004\162\011\156" +
    "\012\155\026\142\031\167\034\166\043\135\045\133\046" +
    "\154\047\132\050\145\052\256\001\002\000\026\005\uffef" +
    "\010\uffef\015\uffef\017\uffef\020\uffef\021\uffef\024\uffef\025" +
    "\uffef\027\uffef\044\uffef\001\002\000\032\005\uffde\010\uffde" +
    "\013\uffde\015\uffde\017\uffde\020\uffde\021\uffde\024\uffde\025" +
    "\uffde\027\uffde\036\uffde\044\uffde\001\002\000\026\005\uffed" +
    "\010\uffed\015\uffed\017\uffed\020\uffed\021\uffed\024\uffed\025" +
    "\uffed\027\uffed\044\uffed\001\002\000\024\022\021\026\016" +
    "\030\015\034\014\043\010\045\020\047\022\050\023\052" +
    "\024\001\002\000\024\022\021\026\016\030\015\034\014" +
    "\043\010\045\020\047\022\050\023\052\024\001\002\000" +
    "\032\005\uffd7\010\uffd7\013\uffd7\015\uffd7\017\uffd7\020\uffd7" +
    "\021\uffd7\024\uffd7\025\uffd7\027\uffd7\036\uffd7\044\uffd7\001" +
    "\002\000\006\022\146\052\210\001\002\000\006\022\146" +
    "\052\210\001\002\000\032\005\uffd6\010\uffd6\013\uffd6\015" +
    "\uffd6\017\uffd6\020\uffd6\021\uffd6\024\uffd6\025\uffd6\027\uffd6" +
    "\036\uffd6\044\uffd6\001\002\000\004\052\231\001\002\000" +
    "\032\005\uffdc\010\uffdc\013\uffdc\015\uffdc\017\uffdc\020\uffdc" +
    "\021\uffdc\024\uffdc\025\uffdc\027\uffdc\036\uffdc\044\uffdc\001" +
    "\002\000\052\004\162\011\156\012\155\014\153\016\152" +
    "\022\146\026\142\031\167\034\166\035\165\040\163\041" +
    "\160\042\136\043\135\045\133\046\154\047\132\050\145" +
    "\051\141\052\137\001\002\000\052\004\162\011\156\012" +
    "\155\014\153\016\152\022\146\026\142\031\167\034\166" +
    "\035\165\040\163\041\160\042\136\043\135\045\133\046" +
    "\154\047\132\050\145\051\141\052\137\001\002\000\006" +
    "\010\213\020\204\001\002\000\004\004\172\001\002\000" +
    "\032\005\uffd8\010\uffd8\013\uffd8\015\uffd8\017\uffd8\020\uffd8" +
    "\021\uffd8\024\uffd8\025\uffd8\027\uffd8\036\uffd8\044\uffd8\001" +
    "\002\000\032\005\uffff\010\uffff\013\uffff\015\uffff\017\uffff" +
    "\020\uffff\021\uffff\024\uffff\025\uffff\027\uffff\036\uffff\044" +
    "\uffff\001\002\000\032\005\ufffe\010\ufffe\013\ufffe\015\ufffe" +
    "\017\ufffe\020\ufffe\021\ufffe\024\ufffe\025\ufffe\027\ufffe\036" +
    "\ufffe\044\ufffe\001\002\000\032\005\uffdd\010\uffdd\013\uffdd" +
    "\015\uffdd\017\uffdd\020\uffdd\021\uffdd\024\uffdd\025\uffdd\027" +
    "\uffdd\036\uffdd\044\uffdd\001\002\000\024\022\021\026\016" +
    "\030\015\034\014\043\010\045\020\047\022\050\023\052" +
    "\024\001\002\000\004\023\206\001\002\000\004\005\200" +
    "\001\002\000\010\005\uffe6\024\176\025\uffe6\001\002\000" +
    "\024\022\021\026\016\030\015\034\014\043\010\045\020" +
    "\047\022\050\023\052\024\001\002\000\006\005\uffe5\025" +
    "\uffe5\001\002\000\004\007\201\001\002\000\052\004\162" +
    "\011\156\012\155\014\153\016\152\022\146\026\142\031" +
    "\167\034\166\035\165\040\163\041\160\042\136\043\135" +
    "\045\133\046\154\047\132\050\145\051\141\052\137\001" +
    "\002\000\006\010\203\020\204\001\002\000\026\005\ufff4" +
    "\010\ufff4\015\ufff4\017\ufff4\020\ufff4\021\ufff4\024\ufff4\025" +
    "\ufff4\027\ufff4\044\ufff4\001\002\000\052\004\162\011\156" +
    "\012\155\014\153\016\152\022\146\026\142\031\167\034" +
    "\166\035\165\040\163\041\160\042\136\043\135\045\133" +
    "\046\154\047\132\050\145\051\141\052\137\001\002\000" +
    "\026\005\uffee\010\uffee\015\uffee\017\uffee\020\uffee\021\uffee" +
    "\024\uffee\025\uffee\027\uffee\044\uffee\001\002\000\006\022" +
    "\146\052\210\001\002\000\016\005\uffe8\015\uffe8\017\uffe8" +
    "\024\uffe8\025\uffe8\036\211\001\002\000\032\005\uffea\010" +
    "\uffea\013\uffea\015\uffea\017\uffea\020\uffea\021\uffea\024\uffea" +
    "\025\uffea\027\uffea\036\uffea\044\uffea\001\002\000\052\004" +
    "\162\011\156\012\155\014\153\016\152\022\146\026\142" +
    "\031\167\034\166\035\165\040\163\041\160\042\136\043" +
    "\135\045\133\046\154\047\132\050\145\051\141\052\137" +
    "\001\002\000\016\005\uffe7\015\uffe7\017\uffe7\020\204\024" +
    "\uffe7\025\uffe7\001\002\000\004\002\000\001\002\000\006" +
    "\020\204\044\215\001\002\000\044\004\041\011\037\012" +
    "\036\022\021\026\016\030\015\031\045\034\014\035\044" +
    "\040\043\041\040\043\010\045\020\047\022\050\023\051" +
    "\030\052\024\001\002\000\070\004\041\005\uffe3\010\uffe3" +
    "\011\037\012\036\015\uffe3\017\uffe3\020\uffe3\021\uffe3\022" +
    "\021\024\uffe3\025\uffe3\026\016\027\uffe3\030\015\031\045" +
    "\034\014\035\044\040\043\041\040\043\010\044\uffe3\045" +
    "\020\047\022\050\023\051\030\052\024\001\002\000\026" +
    "\005\ufff2\010\ufff2\015\ufff2\017\ufff2\020\ufff2\021\ufff2\024" +
    "\ufff2\025\ufff2\027\ufff2\044\ufff2\001\002\000\006\020\050" +
    "\025\221\001\002\000\004\007\222\001\002\000\052\004" +
    "\162\011\156\012\155\014\153\016\152\022\146\026\142" +
    "\031\167\034\166\035\165\040\163\041\160\042\136\043" +
    "\135\045\133\046\154\047\132\050\145\051\141\052\137" +
    "\001\002\000\006\010\224\020\204\001\002\000\070\004" +
    "\uffe4\005\uffe4\010\uffe4\011\uffe4\012\uffe4\015\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\022\uffe4\024\uffe4\025\uffe4\026\uffe4\027" +
    "\uffe4\030\uffe4\031\uffe4\034\uffe4\035\uffe4\040\uffe4\041\uffe4" +
    "\043\uffe4\044\uffe4\045\uffe4\047\uffe4\050\uffe4\051\uffe4\052" +
    "\uffe4\001\002\000\026\005\uffe2\010\uffe2\015\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\024\uffe2\025\uffe2\027\uffe2\044\uffe2\001" +
    "\002\000\006\005\227\020\204\001\002\000\032\005\ufffc" +
    "\010\ufffc\013\ufffc\015\ufffc\017\ufffc\020\ufffc\021\ufffc\024" +
    "\ufffc\025\ufffc\027\ufffc\036\ufffc\044\ufffc\001\002\000\004" +
    "\037\234\001\002\000\006\021\232\037\uffa4\001\002\000" +
    "\004\052\231\001\002\000\004\037\uffa3\001\002\000\052" +
    "\004\162\011\156\012\155\014\153\016\152\022\146\026" +
    "\142\031\167\034\166\035\165\040\163\041\160\042\136" +
    "\043\135\045\133\046\154\047\132\050\145\051\141\052" +
    "\137\001\002\000\026\005\ufff1\010\ufff1\015\ufff1\017\ufff1" +
    "\020\ufff1\021\ufff1\024\ufff1\025\ufff1\027\ufff1\044\ufff1\001" +
    "\002\000\032\005\ufffb\010\ufffb\013\ufffb\015\ufffb\017\ufffb" +
    "\020\ufffb\021\ufffb\024\ufffb\025\ufffb\027\ufffb\036\ufffb\044" +
    "\ufffb\001\002\000\032\005\ufffa\010\ufffa\013\ufffa\015\ufffa" +
    "\017\ufffa\020\ufffa\021\ufffa\024\ufffa\025\ufffa\027\ufffa\036" +
    "\ufffa\044\ufffa\001\002\000\004\015\241\001\002\000\024" +
    "\022\021\026\016\030\015\034\014\043\010\045\020\047" +
    "\022\050\023\052\024\001\002\000\004\005\243\001\002" +
    "\000\004\007\244\001\002\000\052\004\162\011\156\012" +
    "\155\014\153\016\152\022\146\026\142\031\167\034\166" +
    "\035\165\040\163\041\160\042\136\043\135\045\133\046" +
    "\154\047\132\050\145\051\141\052\137\001\002\000\006" +
    "\010\246\020\204\001\002\000\026\005\ufff6\010\ufff6\015" +
    "\ufff6\017\ufff6\020\ufff6\021\ufff6\024\ufff6\025\ufff6\027\ufff6" +
    "\044\ufff6\001\002\000\004\017\250\001\002\000\024\022" +
    "\021\026\016\030\015\034\014\043\010\045\020\047\022" +
    "\050\023\052\024\001\002\000\004\005\252\001\002\000" +
    "\004\007\253\001\002\000\052\004\162\011\156\012\155" +
    "\014\153\016\152\022\146\026\142\031\167\034\166\035" +
    "\165\040\163\041\160\042\136\043\135\045\133\046\154" +
    "\047\132\050\145\051\141\052\137\001\002\000\006\010" +
    "\255\020\204\001\002\000\026\005\ufff5\010\ufff5\015\ufff5" +
    "\017\ufff5\020\ufff5\021\ufff5\024\ufff5\025\ufff5\027\ufff5\044" +
    "\ufff5\001\002\000\034\005\ufffd\007\260\010\ufffd\013\ufffd" +
    "\015\ufffd\017\ufffd\020\ufffd\021\ufffd\024\ufffd\025\ufffd\027" +
    "\ufffd\036\ufffd\044\ufffd\001\002\000\032\005\uffe9\010\uffe9" +
    "\013\uffe9\015\uffe9\017\uffe9\020\uffe9\021\uffe9\024\uffe9\025" +
    "\uffe9\027\uffe9\036\uffe9\044\uffe9\001\002\000\052\004\162" +
    "\011\156\012\155\014\153\016\152\022\146\026\142\031" +
    "\167\034\166\035\165\040\163\041\160\042\136\043\135" +
    "\045\133\046\154\047\132\050\145\051\141\052\137\001" +
    "\002\000\004\010\265\001\002\000\014\005\uffec\010\uffec" +
    "\020\204\021\263\027\uffec\001\002\000\052\004\162\011" +
    "\156\012\155\014\153\016\152\022\146\026\142\031\167" +
    "\034\166\035\165\040\163\041\160\042\136\043\135\045" +
    "\133\046\154\047\132\050\145\051\141\052\137\001\002" +
    "\000\010\005\uffeb\010\uffeb\027\uffeb\001\002\000\032\005" +
    "\uffd3\010\uffd3\013\uffd3\015\uffd3\017\uffd3\020\uffd3\021\uffd3" +
    "\024\uffd3\025\uffd3\027\uffd3\036\uffd3\044\uffd3\001\002\000" +
    "\004\027\267\001\002\000\032\005\uffd4\010\uffd4\013\uffd4" +
    "\015\uffd4\017\uffd4\020\uffd4\021\uffd4\024\uffd4\025\uffd4\027" +
    "\uffd4\036\uffd4\044\uffd4\001\002\000\052\004\162\011\156" +
    "\012\155\014\153\016\152\022\146\026\142\031\167\034" +
    "\166\035\165\040\163\041\160\042\136\043\135\045\133" +
    "\046\154\047\132\050\145\051\141\052\137\001\002\000" +
    "\004\005\272\001\002\000\026\005\ufff0\010\ufff0\015\ufff0" +
    "\017\ufff0\020\ufff0\021\ufff0\024\ufff0\025\ufff0\027\ufff0\044" +
    "\ufff0\001\002\000\004\004\274\001\002\000\052\004\162" +
    "\011\156\012\155\014\153\016\152\022\146\026\142\031" +
    "\167\034\166\035\165\040\163\041\160\042\136\043\135" +
    "\045\133\046\154\047\132\050\145\051\141\052\137\001" +
    "\002\000\004\005\276\001\002\000\026\005\ufff8\010\ufff8" +
    "\015\ufff8\017\ufff8\020\ufff8\021\ufff8\024\ufff8\025\ufff8\027" +
    "\ufff8\044\ufff8\001\002\000\004\032\300\001\002\000\024" +
    "\022\021\026\016\030\015\034\014\043\010\045\020\047" +
    "\022\050\023\052\024\001\002\000\004\010\304\001\002" +
    "\000\006\010\uffe0\032\300\001\002\000\004\010\uffdf\001" +
    "\002\000\026\005\ufff3\010\ufff3\015\ufff3\017\ufff3\020\ufff3" +
    "\021\ufff3\024\ufff3\025\ufff3\027\ufff3\044\ufff3\001\002\000" +
    "\004\025\306\001\002\000\004\007\307\001\002\000\052" +
    "\004\162\011\156\012\155\014\153\016\152\022\146\026" +
    "\142\031\167\034\166\035\165\040\163\041\160\042\136" +
    "\043\135\045\133\046\154\047\132\050\145\051\141\052" +
    "\137\001\002\000\006\010\311\020\204\001\002\000\006" +
    "\010\uffe1\032\uffe1\001\002\000\004\027\313\001\002\000" +
    "\026\005\uffac\010\uffac\013\uffac\020\uffac\021\uffac\023\uffac" +
    "\024\uffac\025\uffac\027\uffac\044\uffac\001\002\000\026\005" +
    "\uffb6\022\021\026\016\030\015\034\014\043\010\045\020" +
    "\047\022\050\023\052\024\001\002\000\004\005\uffb4\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\314\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\026\010\036\011" +
    "\037\016\044\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\026\026\030\031\031\032\032" +
    "\033\033\034\034\045\035\311\036\030\044\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\026\123\030" +
    "\031\031\125\044\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\026\026\030\031\031" +
    "\032\032\033\033\034\034\045\035\025\036\030\044\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\026\010\036" +
    "\112\044\012\001\001\000\010\026\010\036\111\044\012" +
    "\001\001\000\006\026\104\027\102\001\001\000\022\026" +
    "\026\030\031\031\032\032\033\033\034\034\100\036\030" +
    "\044\041\001\001\000\002\001\001\000\022\026\026\030" +
    "\031\031\032\032\033\033\034\034\066\036\030\044\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\026\026\030\031\031\032\032\033\033\034" +
    "\034\045\035\051\036\030\044\041\001\001\000\020\026" +
    "\026\030\031\031\032\032\033\033\050\036\030\044\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\026" +
    "\010\036\053\040\054\041\055\044\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\026\026\030\031\031\032\032\033\033\034" +
    "\034\060\036\030\044\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\026\010\036\053\040\054\041\063" +
    "\044\012\001\001\000\002\001\001\000\010\026\010\036" +
    "\065\044\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\026\026\030\031\031\032\032\033\033\034\034" +
    "\071\036\030\042\070\043\072\044\041\001\001\000\026" +
    "\026\026\030\031\031\032\032\033\033\034\034\071\036" +
    "\030\042\070\043\077\044\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\026\026\030" +
    "\031\031\032\032\033\033\034\034\075\036\030\044\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\026\104\027" +
    "\106\001\001\000\002\001\001\000\020\026\026\030\031" +
    "\031\032\032\033\033\110\036\030\044\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\026\026\030\031\031\032\032\033\033" +
    "\034\034\045\035\115\036\030\044\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\026\026\030\031\031" +
    "\032\032\033\033\034\034\045\035\120\036\030\044\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\003\142\004" +
    "\143\005\146\006\150\007\163\011\137\020\167\021\147" +
    "\022\160\023\170\024\156\025\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\003\142\004\143\005\146\006\150" +
    "\007\261\010\265\011\137\020\167\021\147\022\160\023" +
    "\170\024\156\025\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\142\004\256\020" +
    "\167\021\147\022\160\023\170\024\156\025\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\246\026\010\036\172\044\012\001\001\000\012" +
    "\012\237\026\010\036\172\044\012\001\001\000\002\001" +
    "\001\000\004\011\236\001\001\000\004\011\235\001\001" +
    "\000\002\001\001\000\004\046\227\001\001\000\002\001" +
    "\001\000\032\003\142\004\143\005\146\006\150\007\225" +
    "\011\137\020\167\021\147\022\160\023\170\024\156\025" +
    "\133\001\001\000\032\003\142\004\143\005\146\006\150" +
    "\007\213\011\137\020\167\021\147\022\160\023\170\024" +
    "\156\025\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\012\174\013\173\026\010\036\172" +
    "\044\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\012\174\013\176\026\010\036\172" +
    "\044\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\003\142\004\143\005\146\006\150\007\201\011\137" +
    "\020\167\021\147\022\160\023\170\024\156\025\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\142" +
    "\004\143\005\146\006\204\011\137\020\167\021\147\022" +
    "\160\023\170\024\156\025\133\001\001\000\002\001\001" +
    "\000\004\011\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\142\004\143\005\146\006\150\007\211" +
    "\011\137\020\167\021\147\022\160\023\170\024\156\025" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\014\215\015\216\026\026\030\031\031" +
    "\032\032\033\033\034\034\217\036\030\044\041\001\001" +
    "\000\026\014\215\015\224\026\026\030\031\031\032\032" +
    "\033\033\034\034\217\036\030\044\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\003" +
    "\142\004\143\005\146\006\150\007\222\011\137\020\167" +
    "\021\147\022\160\023\170\024\156\025\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\232\001\001\000\002\001\001\000\030" +
    "\003\142\004\143\005\146\006\234\011\137\020\167\021" +
    "\147\022\160\023\170\024\156\025\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\241\026\010\036\172\044\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\003\142\004" +
    "\143\005\146\006\150\007\244\011\137\020\167\021\147" +
    "\022\160\023\170\024\156\025\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\012\250" +
    "\026\010\036\172\044\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\003\142\004\143\005\146\006\150" +
    "\007\253\011\137\020\167\021\147\022\160\023\170\024" +
    "\156\025\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\003\142\004" +
    "\143\005\146\006\150\007\261\010\260\011\137\020\167" +
    "\021\147\022\160\023\170\024\156\025\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\003\142\004\143" +
    "\005\146\006\150\007\261\010\263\011\137\020\167\021" +
    "\147\022\160\023\170\024\156\025\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\003\142\004\143\005\146\006\150\007\261" +
    "\010\270\011\137\020\167\021\147\022\160\023\170\024" +
    "\156\025\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\003\142\004\143\005\146\006" +
    "\150\007\261\010\274\011\137\020\167\021\147\022\160" +
    "\023\170\024\156\025\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\301\017\300\001\001\000\014" +
    "\012\174\013\304\026\010\036\172\044\012\001\001\000" +
    "\002\001\001\000\006\016\301\017\302\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\142\004\143\005\146\006\150\007\307" +
    "\011\137\020\167\021\147\022\160\023\170\024\156\025" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\026\010\036\011\037" +
    "\314\044\012\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public coop.rchain.syntax.rholang.Absyn.Contr pContr() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (coop.rchain.syntax.rholang.Absyn.Contr) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ListName ::= Name _SYMB_13 ListName 
            {
              coop.rchain.syntax.rholang.Absyn.ListName RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListName p_3 = (coop.rchain.syntax.rholang.Absyn.ListName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListName",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ListName ::= Name 
            {
              coop.rchain.syntax.rholang.Absyn.ListName RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListName(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListName",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ListVar ::= Var _SYMB_13 ListVar 
            {
              coop.rchain.syntax.rholang.Absyn.ListVar RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListVar p_3 = (coop.rchain.syntax.rholang.Absyn.ListVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVar",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ListVar ::= Var 
            {
              coop.rchain.syntax.rholang.Absyn.ListVar RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListVar(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVar",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ListValPattern ::= ValPattern _SYMB_13 ListValPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListValPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ValPattern p_1 = (coop.rchain.syntax.rholang.Absyn.ValPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListValPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListValPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListValPattern",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ListValPattern ::= ValPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListValPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ValPattern p_1 = (coop.rchain.syntax.rholang.Absyn.ValPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListValPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListValPattern",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ValPattern ::= _STRING_ 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtStr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ValPattern ::= _DOUBLE_ 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtDbl(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ValPattern ::= _INTEGER_ 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ValPattern ::= _SYMB_24 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ValPattern ::= _SYMB_31 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtTrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ValPattern ::= _SYMB_18 ListPPattern _SYMB_19 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_2 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtTuple(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ValPattern ::= Var _SYMB_3 ListPPattern _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtStruct(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ListPatternPatternMatch ::= PatternPatternMatch ListPatternPatternMatch 
            {
              coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PatternPatternMatch p_1 = (coop.rchain.syntax.rholang.Absyn.PatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch p_2 = (coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternPatternMatch",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ListPatternPatternMatch ::= PatternPatternMatch 
            {
              coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PatternPatternMatch p_1 = (coop.rchain.syntax.rholang.Absyn.PatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternPatternMatch",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PatternPatternMatch ::= PPattern _SYMB_17 _SYMB_3 PPattern _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.PatternPatternMatch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.PPattern p_4 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PtBranch(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PatternPatternMatch",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ListPatternBind ::= PatternBind _SYMB_16 ListPatternBind 
            {
              coop.rchain.syntax.rholang.Absyn.ListPatternBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PatternBind p_1 = (coop.rchain.syntax.rholang.Absyn.PatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListPatternBind p_3 = (coop.rchain.syntax.rholang.Absyn.ListPatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternBind",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ListPatternBind ::= PatternBind 
            {
              coop.rchain.syntax.rholang.Absyn.ListPatternBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PatternBind p_1 = (coop.rchain.syntax.rholang.Absyn.PatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPatternBind(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternBind",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PatternBind ::= CPattern _SYMB_15 CPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PatternBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.CPattern p_3 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PtBind(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PatternBind",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ListCPattern ::= CPattern _SYMB_13 ListCPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListCPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListCPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListCPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCPattern",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ListCPattern ::= CPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListCPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListCPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCPattern",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ListCPattern ::= 
            {
              coop.rchain.syntax.rholang.Absyn.ListCPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListCPattern(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCPattern",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CPattern ::= ValPattern 
            {
              coop.rchain.syntax.rholang.Absyn.CPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ValPattern p_1 = (coop.rchain.syntax.rholang.Absyn.ValPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CValPtrn(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CPattern",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CPattern ::= _SYMB_14 PPattern3 
            {
              coop.rchain.syntax.rholang.Absyn.CPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_2 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CPtQuote(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CPattern",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CPattern ::= VarPattern 
            {
              coop.rchain.syntax.rholang.Absyn.CPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.VarPattern p_1 = (coop.rchain.syntax.rholang.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CPtVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CPattern",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ListPPattern ::= PPattern _SYMB_13 ListPPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListPPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPPattern",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ListPPattern ::= PPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListPPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPPattern",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ListPPattern ::= 
            {
              coop.rchain.syntax.rholang.Absyn.ListPPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPPattern(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPPattern",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PPattern ::= PPattern1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PPattern ::= PPattern _SYMB_12 PPattern1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.PPattern p_3 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtPar(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PPattern1 ::= PPattern2 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PPattern1 ::= Name _SYMB_0 ListPPattern _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtConstr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PPattern1 ::= _SYMB_29 ListVarPattern _SYMB_27 PPattern1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListVarPattern p_2 = (coop.rchain.syntax.rholang.Absyn.ListVarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.PPattern p_4 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtNew(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PPattern1 ::= _SYMB_28 PPattern _SYMB_32 ListPatternPatternMatch 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_2 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch p_4 = (coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtMatch(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PPattern1 ::= _SYMB_25 _SYMB_0 ListPatternBind _SYMB_1 _SYMB_3 PPattern _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListPatternBind p_3 = (coop.rchain.syntax.rholang.Absyn.ListPatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.PPattern p_6 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtInput(p_3,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PPattern2 ::= PPattern3 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern2",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PPattern2 ::= CPattern _SYMB_7 _SYMB_0 ListPPattern _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_4 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtOutput(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern2",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PPattern3 ::= PPattern4 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern3",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PPattern3 ::= _SYMB_6 CPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_2 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtInject(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern3",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PPattern3 ::= _SYMB_5 CPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_2 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtDrop(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern3",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PPattern4 ::= _SYMB_0 PPattern _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_2 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern4",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PPattern4 ::= ValPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ValPattern p_1 = (coop.rchain.syntax.rholang.Absyn.ValPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtVal(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern4",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PPattern4 ::= _SYMB_21 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtNil(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern4",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PPattern4 ::= VarPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.VarPattern p_1 = (coop.rchain.syntax.rholang.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern4",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ListVarPattern ::= VarPattern _SYMB_13 ListVarPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListVarPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.VarPattern p_1 = (coop.rchain.syntax.rholang.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListVarPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListVarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVarPattern",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ListVarPattern ::= VarPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListVarPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.VarPattern p_1 = (coop.rchain.syntax.rholang.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListVarPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVarPattern",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ListVarPattern ::= 
            {
              coop.rchain.syntax.rholang.Absyn.ListVarPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListVarPattern(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVarPattern",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VarPattern ::= _SYMB_20 
            {
              coop.rchain.syntax.rholang.Absyn.VarPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VarPtWild(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarPattern",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VarPattern ::= Var 
            {
              coop.rchain.syntax.rholang.Absyn.VarPattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VarPtVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarPattern",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Collect ::= _STRING_ 
            {
              coop.rchain.syntax.rholang.Absyn.Collect RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CString(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Collect",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Struct ::= Var _SYMB_3 ListProc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Struct RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		coop.rchain.syntax.rholang.Absyn.ListProc p_3 = (coop.rchain.syntax.rholang.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.StructConstr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Struct",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Entity ::= _SYMB_18 ListProc _SYMB_19 
            {
              coop.rchain.syntax.rholang.Absyn.Entity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListProc p_2 = (coop.rchain.syntax.rholang.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ETuple(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Entity ::= Collect 
            {
              coop.rchain.syntax.rholang.Absyn.Entity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Collect p_1 = (coop.rchain.syntax.rholang.Absyn.Collect)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ECollect(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Entity ::= Struct 
            {
              coop.rchain.syntax.rholang.Absyn.Entity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Struct p_1 = (coop.rchain.syntax.rholang.Absyn.Struct)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.EStruct(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Entity ::= _CHAR_ 
            {
              coop.rchain.syntax.rholang.Absyn.Entity RESULT =null;
		Character p_1 = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.EChar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // RhoBool ::= _SYMB_24 
            {
              coop.rchain.syntax.rholang.Absyn.RhoBool RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RhoBool",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // RhoBool ::= _SYMB_31 
            {
              coop.rchain.syntax.rholang.Absyn.RhoBool RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QTrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RhoBool",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Quantity ::= _DOUBLE_ 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QDouble(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Quantity ::= _INTEGER_ 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Quantity ::= RhoBool 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.RhoBool p_1 = (coop.rchain.syntax.rholang.Absyn.RhoBool)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QBool(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Value ::= Entity 
            {
              coop.rchain.syntax.rholang.Absyn.Value RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Entity p_1 = (coop.rchain.syntax.rholang.Absyn.Entity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VEnt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Value",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Value ::= Quantity 
            {
              coop.rchain.syntax.rholang.Absyn.Value RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VQuant(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Value",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ListCBranch ::= CBranch ListCBranch 
            {
              coop.rchain.syntax.rholang.Absyn.ListCBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CBranch p_1 = (coop.rchain.syntax.rholang.Absyn.CBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		coop.rchain.syntax.rholang.Absyn.ListCBranch p_2 = (coop.rchain.syntax.rholang.Absyn.ListCBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCBranch",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ListCBranch ::= CBranch 
            {
              coop.rchain.syntax.rholang.Absyn.ListCBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CBranch p_1 = (coop.rchain.syntax.rholang.Absyn.CBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListCBranch(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCBranch",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CBranch ::= _SYMB_22 ListBind _SYMB_17 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.CBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListBind p_2 = (coop.rchain.syntax.rholang.Absyn.ListBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_5 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.Choice(p_2,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CBranch",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ListPMBranch ::= PMBranch ListPMBranch 
            {
              coop.rchain.syntax.rholang.Absyn.ListPMBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PMBranch p_1 = (coop.rchain.syntax.rholang.Absyn.PMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		coop.rchain.syntax.rholang.Absyn.ListPMBranch p_2 = (coop.rchain.syntax.rholang.Absyn.ListPMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPMBranch",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ListPMBranch ::= PMBranch 
            {
              coop.rchain.syntax.rholang.Absyn.ListPMBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PMBranch p_1 = (coop.rchain.syntax.rholang.Absyn.PMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPMBranch(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPMBranch",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PMBranch ::= PPattern _SYMB_17 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.PMBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_4 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PatternMatch(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PMBranch",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ListBind ::= Bind _SYMB_16 ListBind 
            {
              coop.rchain.syntax.rholang.Absyn.ListBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Bind p_1 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListBind p_3 = (coop.rchain.syntax.rholang.Absyn.ListBind)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListBind",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ListBind ::= Bind 
            {
              coop.rchain.syntax.rholang.Absyn.ListBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Bind p_1 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListBind(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListBind",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Bind ::= CPattern _SYMB_15 Chan _SYMB_26 Proc 
            {
              coop.rchain.syntax.rholang.Absyn.Bind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Chan p_3 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_5 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CondInputBind(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bind",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Bind ::= CPattern _SYMB_15 Chan 
            {
              coop.rchain.syntax.rholang.Absyn.Bind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Chan p_3 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.InputBind(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bind",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Chan ::= _SYMB_14 Proc3 
            {
              coop.rchain.syntax.rholang.Absyn.Chan RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_2 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CQuote(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Chan",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Chan ::= Var 
            {
              coop.rchain.syntax.rholang.Absyn.Chan RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Chan",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ListProc ::= Proc _SYMB_13 ListProc 
            {
              coop.rchain.syntax.rholang.Absyn.ListProc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListProc p_3 = (coop.rchain.syntax.rholang.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListProc",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ListProc ::= Proc 
            {
              coop.rchain.syntax.rholang.Absyn.ListProc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListProc(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListProc",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Proc ::= Proc1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Proc ::= Proc _SYMB_12 Proc1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_3 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPar(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Proc1 ::= Proc2 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Proc1 ::= Name _SYMB_0 ListProc _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		coop.rchain.syntax.rholang.Absyn.ListProc p_3 = (coop.rchain.syntax.rholang.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PConstr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Proc1 ::= _SYMB_29 ListVar _SYMB_27 Proc1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListVar p_2 = (coop.rchain.syntax.rholang.Absyn.ListVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_4 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PNew(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Proc1 ::= _SYMB_28 Proc _SYMB_32 ListPMBranch 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_2 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListPMBranch p_4 = (coop.rchain.syntax.rholang.Absyn.ListPMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PMatch(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Proc1 ::= _SYMB_30 _SYMB_3 ListCBranch _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListCBranch p_3 = (coop.rchain.syntax.rholang.Absyn.ListCBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PChoice(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Proc1 ::= _SYMB_25 _SYMB_0 ListBind _SYMB_1 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListBind p_3 = (coop.rchain.syntax.rholang.Absyn.ListBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_6 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PInput(p_3,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Proc1 ::= _SYMB_10 Bind _SYMB_11 Bind _SYMB_1 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Bind p_2 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		coop.rchain.syntax.rholang.Absyn.Bind p_4 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_7 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PFoldR(p_2,p_4,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Proc1 ::= _SYMB_8 Bind _SYMB_9 Bind _SYMB_1 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Bind p_2 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		coop.rchain.syntax.rholang.Absyn.Bind p_4 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_7 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PFoldL(p_2,p_4,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Proc2 ::= Proc3 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc2",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Proc2 ::= Chan _SYMB_7 _SYMB_0 ListProc _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Chan p_1 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.ListProc p_4 = (coop.rchain.syntax.rholang.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PLift(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc2",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Proc3 ::= Proc4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc3",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Proc3 ::= _SYMB_6 Chan 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Chan p_2 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PInject(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc3",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Proc3 ::= _SYMB_5 Chan 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Chan p_2 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PDrop(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc3",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Proc4 ::= _SYMB_0 Proc _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_2 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc4",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Proc4 ::= Var 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc4",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Proc4 ::= Value 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Value p_1 = (coop.rchain.syntax.rholang.Absyn.Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PValue(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc4",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Proc4 ::= _SYMB_21 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PNil(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc4",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Contr ::= _SYMB_23 Name _SYMB_0 ListCPattern _SYMB_1 _SYMB_2 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Contr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		coop.rchain.syntax.rholang.Absyn.ListCPattern p_4 = (coop.rchain.syntax.rholang.Absyn.ListCPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_8 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.DContr(p_2,p_4,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Contr",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Contr EOF 
            {
              Object RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Contr start_val = (coop.rchain.syntax.rholang.Absyn.Contr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

