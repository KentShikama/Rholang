
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jul 03 19:14:40 PDT 2017
//----------------------------------------------------

package coop.rchain.syntax.rholang;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jul 03 19:14:40 PDT 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\002\004\000\002\002\013\000\002\003" +
    "\003\000\002\003\003\000\002\003\005\000\002\004\004" +
    "\000\002\004\004\000\002\004\003\000\002\005\007\000" +
    "\002\005\003\000\002\006\013\000\002\006\013\000\002" +
    "\006\011\000\002\006\006\000\002\006\006\000\002\006" +
    "\006\000\002\006\006\000\002\006\003\000\002\007\005" +
    "\000\002\007\003\000\002\010\003\000\002\010\005\000" +
    "\002\011\003\000\002\011\004\000\002\012\005\000\002" +
    "\012\007\000\002\013\003\000\002\013\005\000\002\014" +
    "\007\000\002\015\003\000\002\015\004\000\002\016\010" +
    "\000\002\017\003\000\002\017\004\000\002\020\003\000" +
    "\002\020\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\005\000\002\022\010\000\002\022\003\000\002\023\004" +
    "\000\002\023\003\000\002\024\005\000\002\024\005\000" +
    "\002\024\003\000\002\025\005\000\002\025\005\000\002" +
    "\025\003\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\003\000\002\027\005" +
    "\000\002\027\005\000\002\027\003\000\002\030\003\000" +
    "\002\031\002\000\002\031\003\000\002\031\005\000\002" +
    "\032\003\000\002\032\003\000\002\032\005\000\002\033" +
    "\003\000\002\033\003\000\002\034\002\000\002\034\003" +
    "\000\002\034\005\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\005\000\002\036\004\000\002" +
    "\036\004\000\002\036\003\000\002\037\007\000\002\037" +
    "\003\000\002\040\011\000\002\040\006\000\002\040\006" +
    "\000\002\040\006\000\002\040\003\000\002\041\005\000" +
    "\002\041\003\000\002\042\002\000\002\042\003\000\002" +
    "\042\005\000\002\043\003\000\002\043\003\000\002\043" +
    "\004\000\002\044\002\000\002\044\003\000\002\044\005" +
    "\000\002\045\005\000\002\046\003\000\002\046\005\000" +
    "\002\047\007\000\002\050\003\000\002\050\004\000\002" +
    "\051\006\000\002\051\005\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\052\003\000\002\052\005\000\002\053\003\000" +
    "\002\053\005\000\002\054\003\000\002\054\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\360\000\004\043\004\001\002\000\004\063\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\004\010\001\002\000\026\005\uffa3\020\021\030" +
    "\016\040\012\044\011\055\022\057\020\061\023\062\024" +
    "\064\025\001\002\000\026\005\uff97\010\uff97\013\uff97\016" +
    "\uff97\017\uff97\021\uff97\022\uff97\023\uff97\032\uff97\056\uff97" +
    "\001\002\000\030\005\uffbd\010\uffbd\013\uffbd\016\uffbd\017" +
    "\uffbd\021\uffbd\022\uffbd\023\uffbd\032\uffbd\047\uffbd\056\uffbd" +
    "\001\002\000\026\005\uffa6\010\uffa6\013\uffa6\016\uffa6\017" +
    "\uffa6\021\uffa6\022\uffa6\023\uffa6\032\uffa6\056\uffa6\001\002" +
    "\000\026\005\uffa5\010\uffa5\013\uffa5\016\uffa5\017\uffa5\021" +
    "\uffa5\022\uffa5\023\uffa5\032\uffa5\056\uffa5\001\002\000\006" +
    "\005\uffa2\017\361\001\002\000\046\004\044\011\042\012" +
    "\041\020\021\030\016\032\uffa9\040\012\041\043\044\011" +
    "\045\031\050\027\051\047\055\022\057\020\061\023\062" +
    "\024\063\033\064\025\001\002\000\004\005\130\001\002" +
    "\000\026\005\uff94\010\uff94\013\uff94\016\uff94\017\uff94\021" +
    "\uff94\022\uff94\023\uff94\032\uff94\056\uff94\001\002\000\032" +
    "\004\044\011\042\012\041\030\016\040\012\041\043\044" +
    "\011\055\022\057\020\061\023\062\024\064\025\001\002" +
    "\000\026\005\uff98\010\uff98\013\uff98\016\uff98\017\uff98\021" +
    "\uff98\022\uff98\023\uff98\032\uff98\056\uff98\001\002\000\026" +
    "\005\uff96\010\uff96\013\uff96\016\uff96\017\uff96\021\uff96\022" +
    "\uff96\023\uff96\032\uff96\056\uff96\001\002\000\026\005\uff95" +
    "\010\uff95\013\uff95\016\uff95\017\uff95\021\uff95\022\uff95\023" +
    "\uff95\032\uff95\056\uff95\001\002\000\030\005\uffbe\007\026" +
    "\010\uffbe\013\uffbe\016\uffbe\017\uffbe\021\uffbe\022\uffbe\023" +
    "\uffbe\032\uffbe\056\uffbe\001\002\000\046\004\044\010\uffa9" +
    "\011\042\012\041\020\021\030\016\040\012\041\043\044" +
    "\011\045\031\050\027\051\047\055\022\057\020\061\023" +
    "\062\024\063\033\064\025\001\002\000\044\004\044\011" +
    "\042\012\041\020\021\030\016\040\012\041\043\044\011" +
    "\045\031\050\027\051\047\055\022\057\020\061\023\062" +
    "\024\063\033\064\025\001\002\000\004\010\112\001\002" +
    "\000\004\004\076\001\002\000\022\005\uffb9\010\uffb9\013" +
    "\uffa6\016\uffb9\017\uffb9\023\uffb9\032\uffb9\056\uffb9\001\002" +
    "\000\004\004\073\001\002\000\004\013\067\001\002\000" +
    "\026\005\uffb3\010\uffb3\013\uffb3\016\uffb3\017\uffb3\021\uffb3" +
    "\022\uffb3\023\uffb3\032\uffb3\056\uffb3\001\002\000\020\005" +
    "\uffb1\010\uffb1\016\uffb1\017\uffb1\023\uffb1\032\uffb1\056\uffb1" +
    "\001\002\000\020\005\uffac\010\uffac\016\uffac\017\uffac\023" +
    "\uffac\032\uffac\056\uffac\001\002\000\020\005\uffaa\010\uffaa" +
    "\016\uffaa\017\uffaa\023\uffaa\032\uffaa\056\uffaa\001\002\000" +
    "\024\020\021\030\016\040\012\044\011\055\022\057\020" +
    "\061\023\062\024\064\025\001\002\000\024\020\021\030" +
    "\016\040\012\044\011\055\022\057\020\061\023\062\024" +
    "\064\025\001\002\000\026\005\uffb8\010\uffb8\013\uffb8\016" +
    "\uffb8\017\uffb8\021\uffb8\022\uffb8\023\uffb8\032\uffb8\056\uffb8" +
    "\001\002\000\044\004\044\011\042\012\041\020\021\030" +
    "\016\040\012\041\043\044\011\045\031\050\027\051\047" +
    "\055\022\057\020\061\023\062\024\063\033\064\025\001" +
    "\002\000\022\005\uffb7\010\uffb7\013\uffa5\016\uffb7\017\uffb7" +
    "\023\uffb7\032\uffb7\056\uffb7\001\002\000\014\005\uffa8\010" +
    "\uffa8\016\057\017\060\032\uffa8\001\002\000\010\040\012" +
    "\047\uffbc\064\051\001\002\000\004\047\055\001\002\000" +
    "\006\017\uffbe\047\uffbe\001\002\000\006\017\053\047\uffbb" +
    "\001\002\000\010\040\012\047\uffbc\064\051\001\002\000" +
    "\004\047\uffba\001\002\000\044\004\044\011\042\012\041" +
    "\020\021\030\016\040\012\041\043\044\011\045\031\050" +
    "\027\051\047\055\022\057\020\061\023\062\024\063\033" +
    "\064\025\001\002\000\020\005\uffae\010\uffae\016\uffae\017" +
    "\uffae\023\uffae\032\uffae\056\uffae\001\002\000\044\004\044" +
    "\011\042\012\041\020\021\030\016\040\012\041\043\044" +
    "\011\045\031\050\027\051\047\055\022\057\020\061\023" +
    "\062\024\063\033\064\025\001\002\000\052\004\044\005" +
    "\uffa9\010\uffa9\011\042\012\041\020\021\030\016\032\uffa9" +
    "\040\012\041\043\044\011\045\031\050\027\051\047\055" +
    "\022\057\020\061\023\062\024\063\033\064\025\001\002" +
    "\000\010\005\uffa7\010\uffa7\032\uffa7\001\002\000\020\005" +
    "\uffab\010\uffab\016\uffab\017\uffab\023\uffab\032\uffab\056\uffab" +
    "\001\002\000\006\005\064\016\057\001\002\000\026\005" +
    "\uffb6\010\uffb6\013\uffb6\016\uffb6\017\uffb6\021\uffb6\022\uffb6" +
    "\023\uffb6\032\uffb6\056\uffb6\001\002\000\026\005\uffb5\010" +
    "\uffb5\013\uffb5\016\uffb5\017\uffb5\021\uffb5\022\uffb5\023\uffb5" +
    "\032\uffb5\056\uffb5\001\002\000\026\005\uffb4\010\uffb4\013" +
    "\uffb4\016\uffb4\017\uffb4\021\uffb4\022\uffb4\023\uffb4\032\uffb4" +
    "\056\uffb4\001\002\000\004\004\070\001\002\000\046\004" +
    "\044\005\uffa9\011\042\012\041\020\021\030\016\040\012" +
    "\041\043\044\011\045\031\050\027\051\047\055\022\057" +
    "\020\061\023\062\024\063\033\064\025\001\002\000\004" +
    "\005\072\001\002\000\020\005\uffb2\010\uffb2\016\uffb2\017" +
    "\uffb2\023\uffb2\032\uffb2\056\uffb2\001\002\000\046\004\044" +
    "\005\uffa9\011\042\012\041\020\021\030\016\040\012\041" +
    "\043\044\011\045\031\050\027\051\047\055\022\057\020" +
    "\061\023\062\024\063\033\064\025\001\002\000\004\005" +
    "\075\001\002\000\020\005\uffad\010\uffad\016\uffad\017\uffad" +
    "\023\uffad\032\uffad\056\uffad\001\002\000\024\020\021\030" +
    "\016\040\012\044\011\055\022\057\020\061\023\062\024" +
    "\064\025\001\002\000\004\021\110\001\002\000\006\005" +
    "\uff9f\022\106\001\002\000\004\005\102\001\002\000\004" +
    "\007\103\001\002\000\044\004\044\011\042\012\041\020" +
    "\021\030\016\040\012\041\043\044\011\045\031\050\027" +
    "\051\047\055\022\057\020\061\023\062\024\063\033\064" +
    "\025\001\002\000\006\010\105\016\057\001\002\000\020" +
    "\005\uffb0\010\uffb0\016\uffb0\017\uffb0\023\uffb0\032\uffb0\056" +
    "\uffb0\001\002\000\024\020\021\030\016\040\012\044\011" +
    "\055\022\057\020\061\023\062\024\064\025\001\002\000" +
    "\004\005\uff9e\001\002\000\024\020\021\030\016\040\012" +
    "\044\011\055\022\057\020\061\023\062\024\064\025\001" +
    "\002\000\006\005\uffa0\022\uffa0\001\002\000\026\005\uff9a" +
    "\010\uff9a\013\uff9a\016\uff9a\017\uff9a\021\uff9a\022\uff9a\023" +
    "\uff9a\032\uff9a\056\uff9a\001\002\000\006\016\057\056\114" +
    "\001\002\000\044\004\044\011\042\012\041\020\021\030" +
    "\016\040\012\041\043\044\011\045\031\050\027\051\047" +
    "\055\022\057\020\061\023\062\024\063\033\064\025\001" +
    "\002\000\062\004\044\005\uff9c\010\uff9c\011\042\012\041" +
    "\016\uff9c\017\uff9c\020\021\023\uff9c\030\016\032\uff9c\040" +
    "\012\041\043\044\011\045\031\050\027\051\047\055\022" +
    "\056\uff9c\057\020\061\023\062\024\063\033\064\025\001" +
    "\002\000\006\016\057\023\120\001\002\000\020\005\uffaf" +
    "\010\uffaf\016\uffaf\017\uffaf\023\uffaf\032\uffaf\056\uffaf\001" +
    "\002\000\004\007\121\001\002\000\044\004\044\011\042" +
    "\012\041\020\021\030\016\040\012\041\043\044\011\045" +
    "\031\050\027\051\047\055\022\057\020\061\023\062\024" +
    "\063\033\064\025\001\002\000\006\010\123\016\057\001" +
    "\002\000\062\004\uff9d\005\uff9d\010\uff9d\011\uff9d\012\uff9d" +
    "\016\uff9d\017\uff9d\020\uff9d\023\uff9d\030\uff9d\032\uff9d\040" +
    "\uff9d\041\uff9d\044\uff9d\045\uff9d\050\uff9d\051\uff9d\055\uff9d" +
    "\056\uff9d\057\uff9d\061\uff9d\062\uff9d\063\uff9d\064\uff9d\001" +
    "\002\000\020\005\uff9b\010\uff9b\016\uff9b\017\uff9b\023\uff9b" +
    "\032\uff9b\056\uff9b\001\002\000\026\005\uffb9\010\uffb9\013" +
    "\uffb9\016\uffb9\017\uffb9\021\uffb9\022\uffb9\023\uffb9\032\uffb9" +
    "\056\uffb9\001\002\000\026\005\uffb7\010\uffb7\013\uffb7\016" +
    "\uffb7\017\uffb7\021\uffb7\022\uffb7\023\uffb7\032\uffb7\056\uffb7" +
    "\001\002\000\026\005\uffa4\010\uffa4\013\uffa4\016\uffa4\017" +
    "\uffa4\021\uffa4\022\uffa4\023\uffa4\032\uffa4\056\uffa4\001\002" +
    "\000\004\006\131\001\002\000\004\007\132\001\002\000" +
    "\056\004\143\007\141\011\140\012\136\020\134\025\133" +
    "\036\175\041\174\044\162\045\161\050\157\051\155\052" +
    "\154\053\153\054\137\055\135\057\152\060\200\061\151" +
    "\062\176\063\142\064\144\001\002\000\020\004\143\044" +
    "\162\055\135\057\152\061\151\062\176\064\217\001\002" +
    "\000\036\004\143\007\141\011\140\012\136\025\133\036" +
    "\175\041\174\044\162\055\135\057\152\060\200\061\151" +
    "\062\176\064\217\001\002\000\060\005\uffdf\010\uffdf\011" +
    "\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\022\uffdf" +
    "\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031" +
    "\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\037\uffdf\046\uffdf" +
    "\056\uffdf\001\002\000\006\020\134\064\265\001\002\000" +
    "\004\004\344\001\002\000\006\020\134\064\265\001\002" +
    "\000\056\004\143\007\141\011\140\012\136\020\134\025" +
    "\133\036\175\041\174\044\162\045\161\050\157\051\155" +
    "\052\154\053\153\054\137\055\135\057\152\060\200\061" +
    "\151\062\176\063\142\064\144\001\002\000\004\004\336" +
    "\001\002\000\022\004\143\025\133\044\162\055\135\057" +
    "\152\061\151\062\176\064\217\001\002\000\056\005\uffd9" +
    "\010\uffd9\011\uffd9\013\uffeb\014\uffd9\015\uffd9\016\uffd9\017" +
    "\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9" +
    "\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\037" +
    "\uffd9\056\uffd9\001\002\000\032\005\ufffa\010\ufffa\013\ufffa" +
    "\014\ufffa\015\ufffa\016\ufffa\017\ufffa\022\ufffa\023\ufffa\037" +
    "\ufffa\046\ufffa\056\ufffa\001\002\000\026\005\ufff8\010\ufff8" +
    "\014\ufff8\015\ufff8\016\ufff8\017\ufff8\022\ufff8\023\ufff8\037" +
    "\ufff8\056\ufff8\001\002\000\026\005\ufff0\010\ufff0\014\ufff0" +
    "\015\ufff0\016\ufff0\017\ufff0\022\ufff0\023\ufff0\037\ufff0\056" +
    "\ufff0\001\002\000\026\005\uffee\010\uffee\014\uffee\015\uffee" +
    "\016\uffee\017\uffee\022\uffee\023\uffee\037\uffee\056\uffee\001" +
    "\002\000\060\005\uffdc\010\uffdc\011\uffdc\013\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\022\uffdc\023\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc" +
    "\034\uffdc\035\uffdc\037\uffdc\046\uffdc\056\uffdc\001\002\000" +
    "\060\005\uffda\010\uffda\011\uffda\013\uffda\014\uffda\015\uffda" +
    "\016\uffda\017\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026" +
    "\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda" +
    "\035\uffda\037\uffda\046\uffda\056\uffda\001\002\000\004\004" +
    "\324\001\002\000\004\007\311\001\002\000\004\064\304" +
    "\001\002\000\006\010\302\016\203\001\002\000\056\004" +
    "\143\007\141\011\140\012\136\020\134\025\133\036\175" +
    "\041\174\044\162\045\161\050\157\051\155\052\154\053" +
    "\153\054\137\055\135\057\152\060\200\061\151\062\176" +
    "\063\142\064\144\001\002\000\060\005\uffdd\010\uffdd\011" +
    "\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\022\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031" +
    "\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\037\uffdd\046\uffdd" +
    "\056\uffdd\001\002\000\004\004\251\001\002\000\060\005" +
    "\uffde\010\uffde\011\uffde\013\uffde\014\uffde\015\uffde\016\uffde" +
    "\017\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027" +
    "\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde" +
    "\037\uffde\046\uffde\056\uffde\001\002\000\032\005\ufffe\010" +
    "\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\022\ufffe" +
    "\023\ufffe\037\ufffe\046\ufffe\056\ufffe\001\002\000\060\005" +
    "\uffd6\010\uffd6\011\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6" +
    "\017\uffd6\022\uffd6\023\uffd6\024\241\025\uffd6\026\uffd6\027" +
    "\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6" +
    "\037\uffd6\046\uffd6\056\uffd6\001\002\000\056\005\uffd4\010" +
    "\uffd4\011\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4" +
    "\022\uffd4\023\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031" +
    "\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\037\uffd4\046\uffd4" +
    "\056\uffd4\001\002\000\056\005\uffd1\010\uffd1\011\uffd1\013" +
    "\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\022\uffd1\023\uffd1" +
    "\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\037\uffd1\046\uffd1\056\uffd1\001\002" +
    "\000\056\005\uffce\010\uffce\011\231\013\uffce\014\uffce\015" +
    "\uffce\016\uffce\017\uffce\022\uffce\023\uffce\025\uffce\026\230" +
    "\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035" +
    "\uffce\037\uffce\046\uffce\056\uffce\001\002\000\052\005\uffc9" +
    "\010\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\022" +
    "\uffc9\023\uffc9\025\226\027\225\030\uffc9\031\uffc9\032\uffc9" +
    "\033\uffc9\034\uffc9\035\uffc9\037\uffc9\046\uffc9\056\uffc9\001" +
    "\002\000\046\005\uffc6\010\uffc6\013\uffc6\014\uffc6\015\uffc6" +
    "\016\uffc6\017\uffc6\022\uffc6\023\uffc6\030\222\031\221\032" +
    "\220\033\223\034\uffc6\035\uffc6\037\uffc6\046\uffc6\056\uffc6" +
    "\001\002\000\036\005\uffc5\010\uffc5\013\uffc5\014\uffc5\015" +
    "\uffc5\016\uffc5\017\uffc5\022\uffc5\023\uffc5\034\215\035\214" +
    "\037\uffc5\046\uffc5\056\uffc5\001\002\000\004\013\210\001" +
    "\002\000\032\005\uffff\010\uffff\013\uffff\014\uffff\015\uffff" +
    "\016\uffff\017\uffff\022\uffff\023\uffff\037\uffff\046\uffff\056" +
    "\uffff\001\002\000\056\004\143\007\141\011\140\012\136" +
    "\020\134\025\133\036\175\041\174\044\162\045\161\050" +
    "\157\051\155\052\154\053\153\054\137\055\135\057\152" +
    "\060\200\061\151\062\176\063\142\064\144\001\002\000" +
    "\060\005\uffdb\010\uffdb\011\uffdb\013\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\017\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026" +
    "\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb" +
    "\035\uffdb\037\uffdb\046\uffdb\056\uffdb\001\002\000\032\005" +
    "\uffc1\010\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1" +
    "\022\uffc1\023\uffc1\037\uffc1\046\uffc1\056\uffc1\001\002\000" +
    "\032\005\uffc0\010\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0" +
    "\017\uffc0\022\uffc0\023\uffc0\037\uffc0\046\uffc0\056\uffc0\001" +
    "\002\000\004\037\207\001\002\000\012\005\uffed\016\203" +
    "\017\204\037\uffed\001\002\000\056\004\143\007\141\011" +
    "\140\012\136\020\134\025\133\036\175\041\174\044\162" +
    "\045\161\050\157\051\155\052\154\053\153\054\137\055" +
    "\135\057\152\060\200\061\151\062\176\063\142\064\144" +
    "\001\002\000\056\004\143\007\141\011\140\012\136\020" +
    "\134\025\133\036\175\041\174\044\162\045\161\050\157" +
    "\051\155\052\154\053\153\054\137\055\135\057\152\060" +
    "\200\061\151\062\176\063\142\064\144\001\002\000\006" +
    "\005\uffec\037\uffec\001\002\000\026\005\uffef\010\uffef\014" +
    "\uffef\015\uffef\016\uffef\017\uffef\022\uffef\023\uffef\037\uffef" +
    "\056\uffef\001\002\000\032\005\uffbf\010\uffbf\013\uffbf\014" +
    "\uffbf\015\uffbf\016\uffbf\017\uffbf\022\uffbf\023\uffbf\037\uffbf" +
    "\046\uffbf\056\uffbf\001\002\000\004\004\211\001\002\000" +
    "\056\004\143\007\141\011\140\012\136\020\134\025\133" +
    "\036\175\041\174\044\162\045\161\050\157\051\155\052" +
    "\154\053\153\054\137\055\135\057\152\060\200\061\151" +
    "\062\176\063\142\064\144\001\002\000\004\005\213\001" +
    "\002\000\026\005\ufff9\010\ufff9\014\ufff9\015\ufff9\016\ufff9" +
    "\017\ufff9\022\ufff9\023\ufff9\037\ufff9\056\ufff9\001\002\000" +
    "\022\004\143\025\133\044\162\055\135\057\152\061\151" +
    "\062\176\064\217\001\002\000\022\004\143\025\133\044" +
    "\162\055\135\057\152\061\151\062\176\064\217\001\002" +
    "\000\046\005\uffc8\010\uffc8\013\uffc8\014\uffc8\015\uffc8\016" +
    "\uffc8\017\uffc8\022\uffc8\023\uffc8\030\222\031\221\032\220" +
    "\033\223\034\uffc8\035\uffc8\037\uffc8\046\uffc8\056\uffc8\001" +
    "\002\000\060\005\uffd9\010\uffd9\011\uffd9\013\uffd9\014\uffd9" +
    "\015\uffd9\016\uffd9\017\uffd9\022\uffd9\023\uffd9\024\uffd9\025" +
    "\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9" +
    "\034\uffd9\035\uffd9\037\uffd9\046\uffd9\056\uffd9\001\002\000" +
    "\022\004\143\025\133\044\162\055\135\057\152\061\151" +
    "\062\176\064\217\001\002\000\022\004\143\025\133\044" +
    "\162\055\135\057\152\061\151\062\176\064\217\001\002" +
    "\000\022\004\143\025\133\044\162\055\135\057\152\061" +
    "\151\062\176\064\217\001\002\000\022\004\143\025\133" +
    "\044\162\055\135\057\152\061\151\062\176\064\217\001" +
    "\002\000\052\005\uffca\010\uffca\013\uffca\014\uffca\015\uffca" +
    "\016\uffca\017\uffca\022\uffca\023\uffca\025\226\027\225\030" +
    "\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\037\uffca" +
    "\046\uffca\056\uffca\001\002\000\022\004\143\025\133\044" +
    "\162\055\135\057\152\061\151\062\176\064\217\001\002" +
    "\000\022\004\143\025\133\044\162\055\135\057\152\061" +
    "\151\062\176\064\217\001\002\000\056\005\uffcf\010\uffcf" +
    "\011\231\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\022" +
    "\uffcf\023\uffcf\025\uffcf\026\230\027\uffcf\030\uffcf\031\uffcf" +
    "\032\uffcf\033\uffcf\034\uffcf\035\uffcf\037\uffcf\046\uffcf\056" +
    "\uffcf\001\002\000\022\004\143\025\133\044\162\055\135" +
    "\057\152\061\151\062\176\064\217\001\002\000\022\004" +
    "\143\025\133\044\162\055\135\057\152\061\151\062\176" +
    "\064\217\001\002\000\056\005\uffd3\010\uffd3\011\uffd3\013" +
    "\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\022\uffd3\023\uffd3" +
    "\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033" +
    "\uffd3\034\uffd3\035\uffd3\037\uffd3\046\uffd3\056\uffd3\001\002" +
    "\000\056\005\uffd2\010\uffd2\011\uffd2\013\uffd2\014\uffd2\015" +
    "\uffd2\016\uffd2\017\uffd2\022\uffd2\023\uffd2\025\uffd2\026\uffd2" +
    "\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035" +
    "\uffd2\037\uffd2\046\uffd2\056\uffd2\001\002\000\056\005\uffd0" +
    "\010\uffd0\011\231\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017" +
    "\uffd0\022\uffd0\023\uffd0\025\uffd0\026\230\027\uffd0\030\uffd0" +
    "\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\037\uffd0\046" +
    "\uffd0\056\uffd0\001\002\000\052\005\uffcd\010\uffcd\013\uffcd" +
    "\014\uffcd\015\uffcd\016\uffcd\017\uffcd\022\uffcd\023\uffcd\025" +
    "\226\027\225\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd" +
    "\035\uffcd\037\uffcd\046\uffcd\056\uffcd\001\002\000\052\005" +
    "\uffcc\010\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc" +
    "\022\uffcc\023\uffcc\025\226\027\225\030\uffcc\031\uffcc\032" +
    "\uffcc\033\uffcc\034\uffcc\035\uffcc\037\uffcc\046\uffcc\056\uffcc" +
    "\001\002\000\052\005\uffcb\010\uffcb\013\uffcb\014\uffcb\015" +
    "\uffcb\016\uffcb\017\uffcb\022\uffcb\023\uffcb\025\226\027\225" +
    "\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\037" +
    "\uffcb\046\uffcb\056\uffcb\001\002\000\046\005\uffc7\010\uffc7" +
    "\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\022\uffc7\023" +
    "\uffc7\030\222\031\221\032\220\033\223\034\uffc7\035\uffc7" +
    "\037\uffc7\046\uffc7\056\uffc7\001\002\000\004\064\242\001" +
    "\002\000\004\004\243\001\002\000\024\004\143\005\uffc4" +
    "\025\133\044\162\055\135\057\152\061\151\062\176\064" +
    "\217\001\002\000\006\005\uffc3\017\247\001\002\000\004" +
    "\005\246\001\002\000\056\005\uffd7\010\uffd7\011\uffd7\013" +
    "\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\022\uffd7\023\uffd7" +
    "\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033" +
    "\uffd7\034\uffd7\035\uffd7\037\uffd7\046\uffd7\056\uffd7\001\002" +
    "\000\024\004\143\005\uffc4\025\133\044\162\055\135\057" +
    "\152\061\151\062\176\064\217\001\002\000\004\005\uffc2" +
    "\001\002\000\024\020\021\030\016\040\012\044\011\055" +
    "\022\057\020\061\023\062\024\064\025\001\002\000\004" +
    "\021\263\001\002\000\004\005\257\001\002\000\010\005" +
    "\uffe7\022\255\023\uffe7\001\002\000\024\020\021\030\016" +
    "\040\012\044\011\055\022\057\020\061\023\062\024\064" +
    "\025\001\002\000\006\005\uffe6\023\uffe6\001\002\000\004" +
    "\007\260\001\002\000\056\004\143\007\141\011\140\012" +
    "\136\020\134\025\133\036\175\041\174\044\162\045\161" +
    "\050\157\051\155\052\154\053\153\054\137\055\135\057" +
    "\152\060\200\061\151\062\176\063\142\064\144\001\002" +
    "\000\006\010\262\016\203\001\002\000\026\005\ufff5\010" +
    "\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\022\ufff5\023\ufff5" +
    "\037\ufff5\056\ufff5\001\002\000\006\020\134\064\265\001" +
    "\002\000\016\005\uffe9\014\uffe9\015\uffe9\022\uffe9\023\uffe9" +
    "\046\266\001\002\000\032\005\uffeb\010\uffeb\013\uffeb\014" +
    "\uffeb\015\uffeb\016\uffeb\017\uffeb\022\uffeb\023\uffeb\037\uffeb" +
    "\046\uffeb\056\uffeb\001\002\000\056\004\143\007\141\011" +
    "\140\012\136\020\134\025\133\036\175\041\174\044\162" +
    "\045\161\050\157\051\155\052\154\053\153\054\137\055" +
    "\135\057\152\060\200\061\151\062\176\063\142\064\144" +
    "\001\002\000\016\005\uffe8\014\uffe8\015\uffe8\016\203\022" +
    "\uffe8\023\uffe8\001\002\000\006\016\203\056\271\001\002" +
    "\000\044\004\044\011\042\012\041\020\021\030\016\040" +
    "\012\041\043\044\011\045\031\050\027\051\047\055\022" +
    "\057\020\061\023\062\024\063\033\064\025\001\002\000" +
    "\070\004\044\005\uffe4\010\uffe4\011\042\012\041\014\uffe4" +
    "\015\uffe4\016\uffe4\017\uffe4\020\021\022\uffe4\023\uffe4\030" +
    "\016\037\uffe4\040\012\041\043\044\011\045\031\050\027" +
    "\051\047\055\022\056\uffe4\057\020\061\023\062\024\063" +
    "\033\064\025\001\002\000\026\005\ufff3\010\ufff3\014\ufff3" +
    "\015\ufff3\016\ufff3\017\ufff3\022\ufff3\023\ufff3\037\ufff3\056" +
    "\ufff3\001\002\000\006\016\057\023\275\001\002\000\004" +
    "\007\276\001\002\000\056\004\143\007\141\011\140\012" +
    "\136\020\134\025\133\036\175\041\174\044\162\045\161" +
    "\050\157\051\155\052\154\053\153\054\137\055\135\057" +
    "\152\060\200\061\151\062\176\063\142\064\144\001\002" +
    "\000\006\010\300\016\203\001\002\000\070\004\uffe5\005" +
    "\uffe5\010\uffe5\011\uffe5\012\uffe5\014\uffe5\015\uffe5\016\uffe5" +
    "\017\uffe5\020\uffe5\022\uffe5\023\uffe5\030\uffe5\037\uffe5\040" +
    "\uffe5\041\uffe5\044\uffe5\045\uffe5\050\uffe5\051\uffe5\055\uffe5" +
    "\056\uffe5\057\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5\001" +
    "\002\000\026\005\uffe3\010\uffe3\014\uffe3\015\uffe3\016\uffe3" +
    "\017\uffe3\022\uffe3\023\uffe3\037\uffe3\056\uffe3\001\002\000" +
    "\004\002\000\001\002\000\004\047\307\001\002\000\006" +
    "\017\305\047\uff91\001\002\000\004\064\304\001\002\000" +
    "\004\047\uff90\001\002\000\056\004\143\007\141\011\140" +
    "\012\136\020\134\025\133\036\175\041\174\044\162\045" +
    "\161\050\157\051\155\052\154\053\153\054\137\055\135" +
    "\057\152\060\200\061\151\062\176\063\142\064\144\001" +
    "\002\000\026\005\ufff2\010\ufff2\014\ufff2\015\ufff2\016\ufff2" +
    "\017\ufff2\022\ufff2\023\ufff2\037\ufff2\056\ufff2\001\002\000" +
    "\004\042\313\001\002\000\004\010\323\001\002\000\024" +
    "\020\021\030\016\040\012\044\011\055\022\057\020\061" +
    "\023\062\024\064\025\001\002\000\006\010\uffe1\042\313" +
    "\001\002\000\004\010\uffe0\001\002\000\004\023\317\001" +
    "\002\000\004\007\320\001\002\000\056\004\143\007\141" +
    "\011\140\012\136\020\134\025\133\036\175\041\174\044" +
    "\162\045\161\050\157\051\155\052\154\053\153\054\137" +
    "\055\135\057\152\060\200\061\151\062\176\063\142\064" +
    "\144\001\002\000\006\010\322\016\203\001\002\000\006" +
    "\010\uffe2\042\uffe2\001\002\000\026\005\ufff4\010\ufff4\014" +
    "\ufff4\015\ufff4\016\ufff4\017\ufff4\022\ufff4\023\ufff4\037\ufff4" +
    "\056\ufff4\001\002\000\024\020\021\030\016\040\012\044" +
    "\011\055\022\057\020\061\023\062\024\064\025\001\002" +
    "\000\004\014\326\001\002\000\024\020\021\030\016\040" +
    "\012\044\011\055\022\057\020\061\023\062\024\064\025" +
    "\001\002\000\004\005\330\001\002\000\004\007\331\001" +
    "\002\000\056\004\143\007\141\011\140\012\136\020\134" +
    "\025\133\036\175\041\174\044\162\045\161\050\157\051" +
    "\155\052\154\053\153\054\137\055\135\057\152\060\200" +
    "\061\151\062\176\063\142\064\144\001\002\000\006\010" +
    "\333\016\203\001\002\000\026\005\ufff7\010\ufff7\014\ufff7" +
    "\015\ufff7\016\ufff7\017\ufff7\022\ufff7\023\ufff7\037\ufff7\056" +
    "\ufff7\001\002\000\004\005\335\001\002\000\060\005\uffd8" +
    "\010\uffd8\011\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017" +
    "\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8" +
    "\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\037" +
    "\uffd8\046\uffd8\056\uffd8\001\002\000\056\004\143\007\141" +
    "\011\140\012\136\020\134\025\133\036\175\041\174\044" +
    "\162\045\161\050\157\051\155\052\154\053\153\054\137" +
    "\055\135\057\152\060\200\061\151\062\176\063\142\064" +
    "\144\001\002\000\004\005\340\001\002\000\026\005\ufff1" +
    "\010\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\022\ufff1\023" +
    "\ufff1\037\ufff1\056\ufff1\001\002\000\006\010\342\016\203" +
    "\001\002\000\032\005\ufffd\010\ufffd\013\ufffd\014\ufffd\015" +
    "\ufffd\016\ufffd\017\ufffd\022\ufffd\023\ufffd\037\ufffd\046\ufffd" +
    "\056\ufffd\001\002\000\032\005\ufffc\010\ufffc\013\ufffc\014" +
    "\ufffc\015\ufffc\016\ufffc\017\ufffc\022\ufffc\023\ufffc\037\ufffc" +
    "\046\ufffc\056\ufffc\001\002\000\024\020\021\030\016\040" +
    "\012\044\011\055\022\057\020\061\023\062\024\064\025" +
    "\001\002\000\004\015\346\001\002\000\024\020\021\030" +
    "\016\040\012\044\011\055\022\057\020\061\023\062\024" +
    "\064\025\001\002\000\004\005\350\001\002\000\004\007" +
    "\351\001\002\000\056\004\143\007\141\011\140\012\136" +
    "\020\134\025\133\036\175\041\174\044\162\045\161\050" +
    "\157\051\155\052\154\053\153\054\137\055\135\057\152" +
    "\060\200\061\151\062\176\063\142\064\144\001\002\000" +
    "\006\010\353\016\203\001\002\000\026\005\ufff6\010\ufff6" +
    "\014\ufff6\015\ufff6\016\ufff6\017\ufff6\022\ufff6\023\ufff6\037" +
    "\ufff6\056\ufff6\001\002\000\032\005\ufffb\010\ufffb\013\ufffb" +
    "\014\ufffb\015\ufffb\016\ufffb\017\ufffb\022\ufffb\023\ufffb\037" +
    "\ufffb\046\ufffb\056\ufffb\001\002\000\032\005\uffea\010\uffea" +
    "\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\022\uffea\023" +
    "\uffea\037\uffea\046\uffea\056\uffea\001\002\000\056\005\uffd5" +
    "\010\uffd5\011\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017" +
    "\uffd5\022\uffd5\023\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5" +
    "\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\037\uffd5\046" +
    "\uffd5\056\uffd5\001\002\000\004\032\360\001\002\000\026" +
    "\005\uff99\010\uff99\013\uff99\016\uff99\017\uff99\021\uff99\022" +
    "\uff99\023\uff99\032\uff99\056\uff99\001\002\000\026\005\uffa3" +
    "\020\021\030\016\040\012\044\011\055\022\057\020\061" +
    "\023\062\024\064\025\001\002\000\004\005\uffa1\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\360\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\033\012\043\014\044\016\051\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\033\031\035\034\036\035\037" +
    "\036\040\037\041\045\042\356\043\033\051\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\033\124\035" +
    "\034\036\126\051\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\033" +
    "\031\035\034\036\035\037\036\040\037\041\045\042\027" +
    "\043\033\051\044\001\001\000\022\033\031\035\034\036" +
    "\035\037\036\040\037\041\112\043\033\051\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\033" +
    "\012\043\065\051\013\001\001\000\010\033\012\043\064" +
    "\051\013\001\001\000\002\001\001\000\022\033\031\035" +
    "\034\036\035\037\036\040\037\041\062\043\033\051\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\033" +
    "\051\034\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\033\051\034\053\001\001\000" +
    "\002\001\001\000\020\033\031\035\034\036\035\037\036" +
    "\040\055\043\033\051\044\001\001\000\002\001\001\000" +
    "\020\033\031\035\034\036\035\037\036\040\061\043\033" +
    "\051\044\001\001\000\024\033\031\035\034\036\035\037" +
    "\036\040\037\041\045\042\060\043\033\051\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\033\031\035\034\036\035\037\036\040" +
    "\037\041\045\042\070\043\033\051\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\033\031\035\034\036" +
    "\035\037\036\040\037\041\045\042\073\043\033\051\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\033" +
    "\012\043\076\045\077\046\100\051\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\033\031\035\034\036\035\037\036\040\037" +
    "\041\103\043\033\051\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\033\012\043\076\045\077\046\106" +
    "\051\013\001\001\000\002\001\001\000\010\033\012\043" +
    "\110\051\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\033\031\035\034\036\035\037" +
    "\036\040\037\041\115\043\033\047\114\050\116\051\044" +
    "\001\001\000\026\033\031\035\034\036\035\037\036\040" +
    "\037\041\115\043\033\047\114\050\123\051\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\033\031\035\034\036\035\037\036\040\037\041\121" +
    "\043\033\051\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\003\144\004\145\005\146\006\147\007\155\011\172" +
    "\020\157\021\163\022\164\023\165\024\166\025\167\026" +
    "\170\027\171\030\176\032\162\001\001\000\010\020\157" +
    "\021\163\022\355\001\001\000\032\003\144\004\354\020" +
    "\157\021\163\022\164\023\165\024\166\025\167\026\170" +
    "\027\171\030\176\032\162\001\001\000\002\001\001\000" +
    "\004\011\353\001\001\000\002\001\001\000\004\011\342" +
    "\001\001\000\042\003\144\004\145\005\146\006\147\007" +
    "\340\011\172\020\157\021\163\022\164\023\165\024\166" +
    "\025\167\026\170\027\171\030\176\032\162\001\001\000" +
    "\002\001\001\000\024\020\157\021\163\022\164\023\165" +
    "\024\166\025\167\026\170\027\171\030\333\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\053\302" +
    "\001\001\000\002\001\001\000\042\003\144\004\145\005" +
    "\146\006\147\007\267\011\172\020\157\021\163\022\164" +
    "\023\165\024\166\025\167\026\170\027\171\030\176\032" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\003\144\004\145\005\146\006\147" +
    "\007\201\010\200\011\172\020\157\021\163\022\164\023" +
    "\165\024\166\025\167\026\170\027\171\030\176\032\162" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\003\144" +
    "\004\145\005\146\006\205\011\172\020\157\021\163\022" +
    "\164\023\165\024\166\025\167\026\170\027\171\030\176" +
    "\032\162\001\001\000\044\003\144\004\145\005\146\006" +
    "\147\007\201\010\204\011\172\020\157\021\163\022\164" +
    "\023\165\024\166\025\167\026\170\027\171\030\176\032" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\003\144\004\145\005" +
    "\146\006\147\007\201\010\211\011\172\020\157\021\163" +
    "\022\164\023\165\024\166\025\167\026\170\027\171\030" +
    "\176\032\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\020\157\021\163\022\164\023\165\024\166\025" +
    "\167\026\237\001\001\000\020\020\157\021\163\022\164" +
    "\023\165\024\166\025\167\026\215\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\020\157\021\163\022\164" +
    "\023\165\024\166\025\236\001\001\000\016\020\157\021" +
    "\163\022\164\023\165\024\166\025\235\001\001\000\016" +
    "\020\157\021\163\022\164\023\165\024\166\025\234\001" +
    "\001\000\016\020\157\021\163\022\164\023\165\024\166" +
    "\025\223\001\001\000\002\001\001\000\014\020\157\021" +
    "\163\022\164\023\165\024\233\001\001\000\014\020\157" +
    "\021\163\022\164\023\165\024\226\001\001\000\002\001" +
    "\001\000\012\020\157\021\163\022\164\023\232\001\001" +
    "\000\012\020\157\021\163\022\164\023\231\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\020\157" +
    "\021\163\022\164\023\165\024\166\025\167\026\170\027" +
    "\171\030\243\031\244\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\020\157\021\163\022" +
    "\164\023\165\024\166\025\167\026\170\027\171\030\243" +
    "\031\247\001\001\000\002\001\001\000\014\012\253\013" +
    "\252\033\012\043\251\051\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\012\253\013" +
    "\255\033\012\043\251\051\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\003\144\004\145\005\146\006" +
    "\147\007\260\011\172\020\157\021\163\022\164\023\165" +
    "\024\166\025\167\026\170\027\171\030\176\032\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\263" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\003" +
    "\144\004\145\005\146\006\147\007\266\011\172\020\157" +
    "\021\163\022\164\023\165\024\166\025\167\026\170\027" +
    "\171\030\176\032\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\014\271\015\272\033\031\035\034\036" +
    "\035\037\036\040\037\041\273\043\033\051\044\001\001" +
    "\000\026\014\271\015\300\033\031\035\034\036\035\037" +
    "\036\040\037\041\273\043\033\051\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\003" +
    "\144\004\145\005\146\006\147\007\276\011\172\020\157" +
    "\021\163\022\164\023\165\024\166\025\167\026\170\027" +
    "\171\030\176\032\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\053\305\001\001\000\002" +
    "\001\001\000\040\003\144\004\145\005\146\006\307\011" +
    "\172\020\157\021\163\022\164\023\165\024\166\025\167" +
    "\026\170\027\171\030\176\032\162\001\001\000\002\001" +
    "\001\000\006\016\313\017\311\001\001\000\002\001\001" +
    "\000\014\012\253\013\315\033\012\043\251\051\013\001" +
    "\001\000\006\016\313\017\314\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\003\144\004" +
    "\145\005\146\006\147\007\320\011\172\020\157\021\163" +
    "\022\164\023\165\024\166\025\167\026\170\027\171\030" +
    "\176\032\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\324\033\012\043\251\051" +
    "\013\001\001\000\002\001\001\000\012\012\326\033\012" +
    "\043\251\051\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\003\144\004\145\005\146\006\147\007\331" +
    "\011\172\020\157\021\163\022\164\023\165\024\166\025" +
    "\167\026\170\027\171\030\176\032\162\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\003\144\004\145\005\146\006\147\007\201" +
    "\010\336\011\172\020\157\021\163\022\164\023\165\024" +
    "\166\025\167\026\170\027\171\030\176\032\162\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\344\033\012" +
    "\043\251\051\013\001\001\000\002\001\001\000\012\012" +
    "\346\033\012\043\251\051\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\003\144\004\145\005\146\006" +
    "\147\007\351\011\172\020\157\021\163\022\164\023\165" +
    "\024\166\025\167\026\170\027\171\030\176\032\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\033\012\043\014\044\361\051\013" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public coop.rchain.syntax.rholang.Absyn.Contr pContr() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (coop.rchain.syntax.rholang.Absyn.Contr) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ListName ::= Name _SYMB_11 ListName 
            {
              coop.rchain.syntax.rholang.Absyn.ListName RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListName p_3 = (coop.rchain.syntax.rholang.Absyn.ListName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListName",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ListName ::= Name 
            {
              coop.rchain.syntax.rholang.Absyn.ListName RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListName(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListName",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ListVar ::= Var _SYMB_11 ListVar 
            {
              coop.rchain.syntax.rholang.Absyn.ListVar RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListVar p_3 = (coop.rchain.syntax.rholang.Absyn.ListVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVar",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ListVar ::= Var 
            {
              coop.rchain.syntax.rholang.Absyn.ListVar RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListVar(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVar",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ListValPattern ::= ValPattern _SYMB_11 ListValPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListValPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ValPattern p_1 = (coop.rchain.syntax.rholang.Absyn.ValPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListValPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListValPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListValPattern",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ListValPattern ::= ValPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListValPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ValPattern p_1 = (coop.rchain.syntax.rholang.Absyn.ValPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListValPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListValPattern",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ValPattern ::= _STRING_ 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtStr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ValPattern ::= _DOUBLE_ 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtDbl(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ValPattern ::= _INTEGER_ 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ValPattern ::= _SYMB_32 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ValPattern ::= _SYMB_41 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtTrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ValPattern ::= _SYMB_20 ListPPattern _SYMB_22 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_2 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtTuple(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ValPattern ::= Var _SYMB_3 ListPPattern _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtStruct(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ListPatternPatternMatch ::= PatternPatternMatch ListPatternPatternMatch 
            {
              coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PatternPatternMatch p_1 = (coop.rchain.syntax.rholang.Absyn.PatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch p_2 = (coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternPatternMatch",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ListPatternPatternMatch ::= PatternPatternMatch 
            {
              coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PatternPatternMatch p_1 = (coop.rchain.syntax.rholang.Absyn.PatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternPatternMatch",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PatternPatternMatch ::= PPattern _SYMB_15 _SYMB_3 PPattern _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.PatternPatternMatch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.PPattern p_4 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PtBranch(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PatternPatternMatch",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ListPatternBind ::= PatternBind _SYMB_14 ListPatternBind 
            {
              coop.rchain.syntax.rholang.Absyn.ListPatternBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PatternBind p_1 = (coop.rchain.syntax.rholang.Absyn.PatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListPatternBind p_3 = (coop.rchain.syntax.rholang.Absyn.ListPatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternBind",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ListPatternBind ::= PatternBind 
            {
              coop.rchain.syntax.rholang.Absyn.ListPatternBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PatternBind p_1 = (coop.rchain.syntax.rholang.Absyn.PatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPatternBind(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternBind",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PatternBind ::= CPattern _SYMB_13 CPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PatternBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.CPattern p_3 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PtBind(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PatternBind",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ListCPattern ::= CPattern _SYMB_11 ListCPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListCPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListCPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListCPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCPattern",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ListCPattern ::= CPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListCPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListCPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCPattern",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ListCPattern ::= 
            {
              coop.rchain.syntax.rholang.Absyn.ListCPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListCPattern(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCPattern",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CPattern ::= _SYMB_12 PPattern3 
            {
              coop.rchain.syntax.rholang.Absyn.CPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_2 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CPtQuote(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CPattern",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CPattern ::= ValPattern 
            {
              coop.rchain.syntax.rholang.Absyn.CPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ValPattern p_1 = (coop.rchain.syntax.rholang.Absyn.ValPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CValPtrn(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CPattern",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CPattern ::= VarPattern 
            {
              coop.rchain.syntax.rholang.Absyn.CPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.VarPattern p_1 = (coop.rchain.syntax.rholang.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CPtVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CPattern",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ListPPattern ::= PPattern _SYMB_11 ListPPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListPPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPPattern",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ListPPattern ::= PPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListPPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPPattern",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ListPPattern ::= 
            {
              coop.rchain.syntax.rholang.Absyn.ListPPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPPattern(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPPattern",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PPattern ::= PPattern1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PPattern ::= PPattern _SYMB_10 PPattern1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.PPattern p_3 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtPar(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PPattern1 ::= PPattern2 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PPattern1 ::= Name _SYMB_0 ListPPattern _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtConstr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PPattern1 ::= _SYMB_37 ListVarPattern _SYMB_35 PPattern1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListVarPattern p_2 = (coop.rchain.syntax.rholang.Absyn.ListVarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.PPattern p_4 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtNew(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PPattern1 ::= _SYMB_36 PPattern _SYMB_42 ListPatternPatternMatch 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_2 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch p_4 = (coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtMatch(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PPattern1 ::= _SYMB_33 _SYMB_0 ListPatternBind _SYMB_1 _SYMB_3 PPattern _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListPatternBind p_3 = (coop.rchain.syntax.rholang.Absyn.ListPatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.PPattern p_6 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtInput(p_3,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PPattern2 ::= PPattern3 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern2",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PPattern2 ::= CPattern _SYMB_7 _SYMB_0 ListPPattern _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_4 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtOutput(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern2",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PPattern3 ::= PPattern4 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern3",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PPattern3 ::= _SYMB_6 CPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_2 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtInject(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern3",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PPattern3 ::= _SYMB_5 CPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_2 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtDrop(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern3",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PPattern4 ::= _SYMB_0 PPattern _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_2 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern4",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PPattern4 ::= ValPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ValPattern p_1 = (coop.rchain.syntax.rholang.Absyn.ValPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtVal(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern4",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PPattern4 ::= _SYMB_29 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtNil(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern4",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PPattern4 ::= VarPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.VarPattern p_1 = (coop.rchain.syntax.rholang.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern4",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ListVarPattern ::= VarPattern _SYMB_11 ListVarPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListVarPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.VarPattern p_1 = (coop.rchain.syntax.rholang.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListVarPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListVarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVarPattern",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ListVarPattern ::= VarPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListVarPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.VarPattern p_1 = (coop.rchain.syntax.rholang.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListVarPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVarPattern",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ListVarPattern ::= 
            {
              coop.rchain.syntax.rholang.Absyn.ListVarPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListVarPattern(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVarPattern",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VarPattern ::= _SYMB_28 
            {
              coop.rchain.syntax.rholang.Absyn.VarPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VarPtWild(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarPattern",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VarPattern ::= Var 
            {
              coop.rchain.syntax.rholang.Absyn.VarPattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VarPtVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarPattern",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Value ::= _SYMB_26 ListProc _SYMB_27 
            {
              coop.rchain.syntax.rholang.Absyn.Value RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListProc p_2 = (coop.rchain.syntax.rholang.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ETuple(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Value",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Value ::= _CHAR_ 
            {
              coop.rchain.syntax.rholang.Absyn.Value RESULT =null;
		Character p_1 = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.EChar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Value",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Value ::= Quantity 
            {
              coop.rchain.syntax.rholang.Absyn.Value RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VQuant(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Value",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ListQuantity ::= Quantity _SYMB_11 ListQuantity 
            {
              coop.rchain.syntax.rholang.Absyn.ListQuantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListQuantity p_3 = (coop.rchain.syntax.rholang.Absyn.ListQuantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListQuantity",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ListQuantity ::= Quantity 
            {
              coop.rchain.syntax.rholang.Absyn.ListQuantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListQuantity(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListQuantity",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ListQuantity ::= 
            {
              coop.rchain.syntax.rholang.Absyn.ListQuantity RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListQuantity(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListQuantity",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Quantity ::= Quantity1 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Quantity1 ::= Quantity2 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity1",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Quantity1 ::= Quantity1 _SYMB_25 Quantity2 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Quantity p_3 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QNeq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity1",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Quantity1 ::= Quantity1 _SYMB_24 Quantity2 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Quantity p_3 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QEq(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity1",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Quantity2 ::= Quantity3 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity2",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Quantity2 ::= Quantity2 _SYMB_23 Quantity3 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Quantity p_3 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QGte(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity2",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Quantity2 ::= Quantity2 _SYMB_22 Quantity3 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Quantity p_3 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QGt(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity2",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Quantity2 ::= Quantity2 _SYMB_21 Quantity3 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Quantity p_3 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QLte(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity2",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Quantity2 ::= Quantity2 _SYMB_20 Quantity3 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Quantity p_3 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QLt(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity2",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Quantity3 ::= Quantity4 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity3",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Quantity3 ::= Quantity3 _SYMB_17 Quantity4 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Quantity p_3 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QMinus(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity3",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Quantity3 ::= Quantity3 _SYMB_19 Quantity4 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Quantity p_3 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QAdd(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity3",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Quantity4 ::= Quantity5 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity4",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Quantity4 ::= Quantity4 _SYMB_18 Quantity5 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Quantity p_3 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QDiv(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity4",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Quantity4 ::= Quantity4 _SYMB_5 Quantity5 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Quantity p_3 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QMult(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity4",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Quantity5 ::= Quantity6 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity5",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Quantity5 ::= _SYMB_17 Quantity6 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_2 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QNeg(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity5",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Quantity6 ::= Quantity7 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity6",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Quantity6 ::= Quantity7 _SYMB_16 Var _SYMB_0 ListQuantity _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		coop.rchain.syntax.rholang.Absyn.ListQuantity p_5 = (coop.rchain.syntax.rholang.Absyn.ListQuantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QDot(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity6",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Quantity7 ::= _SYMB_0 Quantity _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_2 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity7",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Quantity7 ::= Var 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity7",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Quantity7 ::= _STRING_ 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QString(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity7",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Quantity7 ::= _DOUBLE_ 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QDouble(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity7",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Quantity7 ::= _INTEGER_ 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity7",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Quantity7 ::= RhoBool 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.RhoBool p_1 = (coop.rchain.syntax.rholang.Absyn.RhoBool)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QBool(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity7",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // RhoBool ::= _SYMB_32 
            {
              coop.rchain.syntax.rholang.Absyn.RhoBool RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RhoBool",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // RhoBool ::= _SYMB_41 
            {
              coop.rchain.syntax.rholang.Absyn.RhoBool RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QTrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RhoBool",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ListCBranch ::= CBranch ListCBranch 
            {
              coop.rchain.syntax.rholang.Absyn.ListCBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CBranch p_1 = (coop.rchain.syntax.rholang.Absyn.CBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		coop.rchain.syntax.rholang.Absyn.ListCBranch p_2 = (coop.rchain.syntax.rholang.Absyn.ListCBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCBranch",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ListCBranch ::= CBranch 
            {
              coop.rchain.syntax.rholang.Absyn.ListCBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CBranch p_1 = (coop.rchain.syntax.rholang.Absyn.CBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListCBranch(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCBranch",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CBranch ::= _SYMB_30 ListBind _SYMB_15 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.CBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListBind p_2 = (coop.rchain.syntax.rholang.Absyn.ListBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_5 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.Choice(p_2,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CBranch",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ListPMBranch ::= PMBranch ListPMBranch 
            {
              coop.rchain.syntax.rholang.Absyn.ListPMBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PMBranch p_1 = (coop.rchain.syntax.rholang.Absyn.PMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		coop.rchain.syntax.rholang.Absyn.ListPMBranch p_2 = (coop.rchain.syntax.rholang.Absyn.ListPMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPMBranch",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ListPMBranch ::= PMBranch 
            {
              coop.rchain.syntax.rholang.Absyn.ListPMBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PMBranch p_1 = (coop.rchain.syntax.rholang.Absyn.PMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPMBranch(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPMBranch",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PMBranch ::= PPattern _SYMB_15 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.PMBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_4 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PatternMatch(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PMBranch",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ListBind ::= Bind _SYMB_14 ListBind 
            {
              coop.rchain.syntax.rholang.Absyn.ListBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Bind p_1 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListBind p_3 = (coop.rchain.syntax.rholang.Absyn.ListBind)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListBind",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ListBind ::= Bind 
            {
              coop.rchain.syntax.rholang.Absyn.ListBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Bind p_1 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListBind(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListBind",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Bind ::= CPattern _SYMB_13 Chan _SYMB_34 Proc 
            {
              coop.rchain.syntax.rholang.Absyn.Bind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Chan p_3 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_5 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CondInputBind(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bind",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Bind ::= CPattern _SYMB_13 Chan 
            {
              coop.rchain.syntax.rholang.Absyn.Bind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Chan p_3 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.InputBind(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bind",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Chan ::= _SYMB_12 Proc3 
            {
              coop.rchain.syntax.rholang.Absyn.Chan RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_2 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CQuote(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Chan",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Chan ::= Var 
            {
              coop.rchain.syntax.rholang.Absyn.Chan RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Chan",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ListProc ::= Proc _SYMB_11 ListProc 
            {
              coop.rchain.syntax.rholang.Absyn.ListProc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListProc p_3 = (coop.rchain.syntax.rholang.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListProc",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ListProc ::= Proc 
            {
              coop.rchain.syntax.rholang.Absyn.ListProc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListProc(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListProc",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Proc ::= Proc1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Proc ::= Proc _SYMB_10 Proc1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_3 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPar(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Proc1 ::= Proc2 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Proc1 ::= Name _SYMB_0 ListProc _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		coop.rchain.syntax.rholang.Absyn.ListProc p_3 = (coop.rchain.syntax.rholang.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PConstr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Proc1 ::= _SYMB_37 ListVar _SYMB_35 Proc1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListVar p_2 = (coop.rchain.syntax.rholang.Absyn.ListVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_4 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PNew(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Proc1 ::= _SYMB_36 Proc _SYMB_42 ListPMBranch 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_2 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListPMBranch p_4 = (coop.rchain.syntax.rholang.Absyn.ListPMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PMatch(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Proc1 ::= _SYMB_38 _SYMB_3 ListCBranch _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListCBranch p_3 = (coop.rchain.syntax.rholang.Absyn.ListCBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PChoice(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Proc1 ::= _SYMB_33 _SYMB_0 ListBind _SYMB_1 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListBind p_3 = (coop.rchain.syntax.rholang.Absyn.ListBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_6 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PInput(p_3,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Proc1 ::= _SYMB_40 _SYMB_0 Bind _SYMB_9 Bind _SYMB_1 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Bind p_3 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		coop.rchain.syntax.rholang.Absyn.Bind p_5 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_8 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PFoldR(p_3,p_5,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Proc1 ::= _SYMB_39 _SYMB_0 Bind _SYMB_8 Bind _SYMB_1 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Bind p_3 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		coop.rchain.syntax.rholang.Absyn.Bind p_5 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_8 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PFoldL(p_3,p_5,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Proc2 ::= Proc3 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc2",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Proc2 ::= Chan _SYMB_7 _SYMB_0 ListProc _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Chan p_1 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.ListProc p_4 = (coop.rchain.syntax.rholang.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PLift(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc2",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Proc3 ::= Proc4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc3",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Proc3 ::= _SYMB_6 Chan 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Chan p_2 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PInject(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc3",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Proc3 ::= _SYMB_5 Chan 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Chan p_2 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PDrop(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc3",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Proc4 ::= _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_2 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc4",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Proc4 ::= Value 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Value p_1 = (coop.rchain.syntax.rholang.Absyn.Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PValue(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc4",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Proc4 ::= _SYMB_29 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PNil(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc4",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Contr ::= _SYMB_31 Name _SYMB_0 ListCPattern _SYMB_1 _SYMB_2 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Contr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		coop.rchain.syntax.rholang.Absyn.ListCPattern p_4 = (coop.rchain.syntax.rholang.Absyn.ListCPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_8 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.DContr(p_2,p_4,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Contr",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Contr EOF 
            {
              Object RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Contr start_val = (coop.rchain.syntax.rholang.Absyn.Contr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

