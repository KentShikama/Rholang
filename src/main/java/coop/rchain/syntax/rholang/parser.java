
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Feb 15 23:01:55 PST 2017
//----------------------------------------------------

package coop.rchain.syntax.rholang;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Feb 15 23:01:55 PST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\122\000\002\002\004\000\002\002\013\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\005" +
    "\000\002\004\004\000\002\004\004\000\002\004\003\000" +
    "\002\005\007\000\002\005\003\000\002\006\011\000\002" +
    "\006\006\000\002\006\006\000\002\006\006\000\002\006" +
    "\006\000\002\006\003\000\002\007\005\000\002\007\003" +
    "\000\002\010\003\000\002\010\005\000\002\011\003\000" +
    "\002\011\004\000\002\012\005\000\002\012\007\000\002" +
    "\013\003\000\002\013\005\000\002\014\007\000\002\015" +
    "\003\000\002\015\004\000\002\016\010\000\002\017\003" +
    "\000\002\017\004\000\002\020\003\000\002\020\003\000" +
    "\002\021\003\000\002\021\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\023\006\000\002\024" +
    "\003\000\002\025\003\000\002\025\003\000\002\026\002" +
    "\000\002\026\003\000\002\026\005\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\005\000\002" +
    "\030\004\000\002\030\004\000\002\030\003\000\002\031" +
    "\007\000\002\031\003\000\002\032\011\000\002\032\006" +
    "\000\002\032\006\000\002\032\006\000\002\032\003\000" +
    "\002\033\005\000\002\033\003\000\002\034\002\000\002" +
    "\034\003\000\002\034\005\000\002\035\003\000\002\035" +
    "\004\000\002\036\002\000\002\036\003\000\002\036\005" +
    "\000\002\037\005\000\002\040\003\000\002\040\005\000" +
    "\002\041\007\000\002\042\003\000\002\042\004\000\002" +
    "\043\006\000\002\044\003\000\002\044\005\000\002\045" +
    "\003\000\002\045\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\004\025\004\001\002\000\004\041\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\004\010\001\002\000\012\005\uffbd\016\011\022" +
    "\013\042\016\001\002\000\016\004\075\011\073\012\072" +
    "\022\013\023\065\042\061\001\002\000\006\005\uffbc\015" +
    "\253\001\002\000\026\005\uffd6\010\uffd6\013\uffd6\014\uffd6" +
    "\015\uffd6\017\uffd6\020\uffd6\021\uffd6\030\uffd6\034\uffd6\001" +
    "\002\000\004\005\017\001\002\000\024\005\uffbf\010\uffbf" +
    "\013\uffbf\014\uffbf\015\uffbf\017\uffbf\020\uffbf\021\uffbf\034" +
    "\uffbf\001\002\000\026\005\uffd7\010\uffd7\013\uffd7\014\uffd7" +
    "\015\uffd7\017\uffd7\020\uffd7\021\uffd7\030\uffd7\034\uffd7\001" +
    "\002\000\004\006\020\001\002\000\004\007\021\001\002" +
    "\000\040\004\045\011\043\012\042\016\040\023\032\026" +
    "\030\031\051\032\050\033\047\035\023\036\041\037\022" +
    "\040\034\041\027\042\025\001\002\000\024\005\uffde\010" +
    "\uffde\013\uffde\014\uffde\015\uffde\020\uffde\021\uffde\027\uffde" +
    "\034\uffde\001\002\000\024\005\uffd8\010\uffd8\013\uffd8\014" +
    "\uffd8\015\uffd8\020\uffd8\021\uffd8\027\uffd8\034\uffd8\001\002" +
    "\000\024\005\uffda\010\uffda\013\uffda\014\uffda\015\uffda\020" +
    "\uffda\021\uffda\027\uffda\034\uffda\001\002\000\024\005\ufffd" +
    "\007\230\010\ufffd\013\uffec\014\ufffd\015\ufffd\020\ufffd\021" +
    "\ufffd\034\ufffd\001\002\000\004\013\247\001\002\000\004" +
    "\004\244\001\002\000\004\004\236\001\002\000\024\005" +
    "\ufff9\010\ufff9\013\ufff9\014\ufff9\015\ufff9\020\ufff9\021\ufff9" +
    "\027\ufff9\034\ufff9\001\002\000\024\005\uffff\010\uffff\013" +
    "\uffff\014\uffff\015\uffff\020\uffff\021\uffff\027\uffff\034\uffff" +
    "\001\002\000\020\005\ufff7\010\ufff7\014\ufff7\015\ufff7\020" +
    "\ufff7\021\ufff7\034\ufff7\001\002\000\024\005\uffdd\010\uffdd" +
    "\013\uffdd\014\uffdd\015\uffdd\020\uffdd\021\uffdd\027\uffdd\034" +
    "\uffdd\001\002\000\020\005\ufff1\010\ufff1\014\ufff1\015\ufff1" +
    "\020\ufff1\021\ufff1\034\ufff1\001\002\000\024\005\uffe0\010" +
    "\uffe0\013\uffe0\014\uffe0\015\uffe0\020\uffe0\021\uffe0\027\uffe0" +
    "\034\uffe0\001\002\000\020\005\uffef\010\uffef\014\uffef\015" +
    "\uffef\020\uffef\021\uffef\034\uffef\001\002\000\024\004\045" +
    "\011\043\012\042\023\032\035\023\036\041\037\022\040" +
    "\034\042\227\001\002\000\024\005\uffdc\010\uffdc\013\uffdc" +
    "\014\uffdc\015\uffdc\020\uffdc\021\uffdc\027\uffdc\034\uffdc\001" +
    "\002\000\006\016\040\042\210\001\002\000\006\016\040" +
    "\042\210\001\002\000\024\005\uffdb\010\uffdb\013\uffdb\014" +
    "\uffdb\015\uffdb\020\uffdb\021\uffdb\027\uffdb\034\uffdb\001\002" +
    "\000\040\004\045\011\043\012\042\016\040\023\032\026" +
    "\030\031\051\032\050\033\047\035\023\036\041\037\022" +
    "\040\034\041\027\042\025\001\002\000\006\010\221\014" +
    "\055\001\002\000\004\007\175\001\002\000\004\042\170" +
    "\001\002\000\040\004\045\011\043\012\042\016\040\023" +
    "\032\026\030\031\051\032\050\033\047\035\023\036\041" +
    "\037\022\040\034\041\027\042\025\001\002\000\024\005" +
    "\ufffe\010\ufffe\013\ufffe\014\ufffe\015\ufffe\020\ufffe\021\ufffe" +
    "\027\ufffe\034\ufffe\001\002\000\024\005\uffdf\010\uffdf\013" +
    "\uffdf\014\uffdf\015\uffdf\020\uffdf\021\uffdf\027\uffdf\034\uffdf" +
    "\001\002\000\006\014\055\034\056\001\002\000\040\004" +
    "\045\011\043\012\042\016\040\023\032\026\030\031\051" +
    "\032\050\033\047\035\023\036\041\037\022\040\034\041" +
    "\027\042\025\001\002\000\030\004\075\011\073\012\072" +
    "\016\011\022\013\023\065\026\063\031\100\032\077\041" +
    "\062\042\061\001\002\000\046\004\075\005\uffe5\010\uffe5" +
    "\011\073\012\072\014\uffe5\015\uffe5\016\011\020\uffe5\021" +
    "\uffe5\022\013\023\065\026\063\031\100\032\077\034\uffe5" +
    "\041\062\042\061\001\002\000\020\005\uffd2\010\uffd2\013" +
    "\uffbf\014\uffd2\015\uffd2\021\uffd2\034\uffd2\001\002\000\026" +
    "\005\uffd7\007\162\010\uffd7\013\uffd7\014\uffd7\015\uffd7\017" +
    "\uffd7\020\uffd7\021\uffd7\034\uffd7\001\002\000\004\004\157" +
    "\001\002\000\004\004\143\001\002\000\004\013\134\001" +
    "\002\000\024\005\uffd1\010\uffd1\013\uffd1\014\uffd1\015\uffd1" +
    "\017\uffd1\020\uffd1\021\uffd1\034\uffd1\001\002\000\024\005" +
    "\uffcc\010\uffcc\013\uffcc\014\uffcc\015\uffcc\017\uffcc\020\uffcc" +
    "\021\uffcc\034\uffcc\001\002\000\016\005\uffca\010\uffca\014" +
    "\uffca\015\uffca\021\uffca\034\uffca\001\002\000\016\005\uffc5" +
    "\010\uffc5\014\uffc5\015\uffc5\021\uffc5\034\uffc5\001\002\000" +
    "\016\005\uffc3\010\uffc3\014\uffc3\015\uffc3\021\uffc3\034\uffc3" +
    "\001\002\000\010\016\011\022\013\042\016\001\002\000" +
    "\010\016\011\022\013\042\016\001\002\000\024\005\uffd0" +
    "\010\uffd0\013\uffd0\014\uffd0\015\uffd0\017\uffd0\020\uffd0\021" +
    "\uffd0\034\uffd0\001\002\000\030\004\075\011\073\012\072" +
    "\016\011\022\013\023\065\026\063\031\100\032\077\041" +
    "\062\042\061\001\002\000\020\005\ufff4\010\ufff4\014\ufff4" +
    "\015\ufff4\020\ufff4\021\ufff4\034\ufff4\001\002\000\010\022" +
    "\013\030\uffd5\042\016\001\002\000\030\004\075\011\073" +
    "\012\072\016\011\022\013\023\065\026\063\031\100\032" +
    "\077\041\062\042\061\001\002\000\006\014\102\021\103" +
    "\001\002\000\030\004\075\011\073\012\072\016\011\022" +
    "\013\023\065\026\063\031\100\032\077\041\062\042\061" +
    "\001\002\000\004\007\104\001\002\000\040\004\045\011" +
    "\043\012\042\016\040\023\032\026\030\031\051\032\050" +
    "\033\047\035\023\036\041\037\022\040\034\041\027\042" +
    "\025\001\002\000\006\010\106\014\055\001\002\000\046" +
    "\004\uffe6\005\uffe6\010\uffe6\011\uffe6\012\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\026\uffe6" +
    "\031\uffe6\032\uffe6\034\uffe6\041\uffe6\042\uffe6\001\002\000" +
    "\016\005\uffc4\010\uffc4\014\uffc4\015\uffc4\021\uffc4\034\uffc4" +
    "\001\002\000\006\014\102\034\111\001\002\000\030\004" +
    "\075\011\073\012\072\016\011\022\013\023\065\026\063" +
    "\031\100\032\077\041\062\042\061\001\002\000\044\004" +
    "\075\005\uffb6\010\uffb6\011\073\012\072\014\uffb6\015\uffb6" +
    "\016\011\021\uffb6\022\013\023\065\026\063\031\100\032" +
    "\077\034\uffb6\041\062\042\061\001\002\000\006\014\102" +
    "\021\115\001\002\000\016\005\uffc8\010\uffc8\014\uffc8\015" +
    "\uffc8\021\uffc8\034\uffc8\001\002\000\004\007\116\001\002" +
    "\000\030\004\075\011\073\012\072\016\011\022\013\023" +
    "\065\026\063\031\100\032\077\041\062\042\061\001\002" +
    "\000\006\010\120\014\102\001\002\000\044\004\uffb7\005" +
    "\uffb7\010\uffb7\011\uffb7\012\uffb7\014\uffb7\015\uffb7\016\uffb7" +
    "\021\uffb7\022\uffb7\023\uffb7\026\uffb7\031\uffb7\032\uffb7\034" +
    "\uffb7\041\uffb7\042\uffb7\001\002\000\016\005\uffb5\010\uffb5" +
    "\014\uffb5\015\uffb5\021\uffb5\034\uffb5\001\002\000\004\030" +
    "\126\001\002\000\006\015\124\030\uffd4\001\002\000\010" +
    "\022\013\030\uffd5\042\016\001\002\000\004\030\uffd3\001" +
    "\002\000\030\004\075\011\073\012\072\016\011\022\013" +
    "\023\065\026\063\031\100\032\077\041\062\042\061\001" +
    "\002\000\016\005\uffc7\010\uffc7\014\uffc7\015\uffc7\021\uffc7" +
    "\034\uffc7\001\002\000\006\005\131\014\102\001\002\000" +
    "\024\005\uffcf\010\uffcf\013\uffcf\014\uffcf\015\uffcf\017\uffcf" +
    "\020\uffcf\021\uffcf\034\uffcf\001\002\000\024\005\uffce\010" +
    "\uffce\013\uffce\014\uffce\015\uffce\017\uffce\020\uffce\021\uffce" +
    "\034\uffce\001\002\000\024\005\uffcd\010\uffcd\013\uffcd\014" +
    "\uffcd\015\uffcd\017\uffcd\020\uffcd\021\uffcd\034\uffcd\001\002" +
    "\000\004\004\135\001\002\000\032\004\075\005\uffc2\011" +
    "\073\012\072\016\011\022\013\023\065\026\063\031\100" +
    "\032\077\041\062\042\061\001\002\000\004\005\142\001" +
    "\002\000\012\005\uffc1\010\uffc1\014\102\015\140\001\002" +
    "\000\034\004\075\005\uffc2\010\uffc2\011\073\012\072\016" +
    "\011\022\013\023\065\026\063\031\100\032\077\041\062" +
    "\042\061\001\002\000\006\005\uffc0\010\uffc0\001\002\000" +
    "\016\005\uffcb\010\uffcb\014\uffcb\015\uffcb\021\uffcb\034\uffcb" +
    "\001\002\000\010\016\011\022\013\042\016\001\002\000" +
    "\004\005\153\001\002\000\004\017\151\001\002\000\006" +
    "\005\uffb9\020\147\001\002\000\010\016\011\022\013\042" +
    "\016\001\002\000\004\005\uffb8\001\002\000\010\016\011" +
    "\022\013\042\016\001\002\000\006\005\uffba\020\uffba\001" +
    "\002\000\004\007\154\001\002\000\030\004\075\011\073" +
    "\012\072\016\011\022\013\023\065\026\063\031\100\032" +
    "\077\041\062\042\061\001\002\000\006\010\156\014\102" +
    "\001\002\000\016\005\uffc9\010\uffc9\014\uffc9\015\uffc9\021" +
    "\uffc9\034\uffc9\001\002\000\032\004\075\005\uffc2\011\073" +
    "\012\072\016\011\022\013\023\065\026\063\031\100\032" +
    "\077\041\062\042\061\001\002\000\004\005\161\001\002" +
    "\000\016\005\uffc6\010\uffc6\014\uffc6\015\uffc6\021\uffc6\034" +
    "\uffc6\001\002\000\032\004\075\010\uffc2\011\073\012\072" +
    "\016\011\022\013\023\065\026\063\031\100\032\077\041" +
    "\062\042\061\001\002\000\004\010\164\001\002\000\024" +
    "\005\uffb4\010\uffb4\013\uffb4\014\uffb4\015\uffb4\017\uffb4\020" +
    "\uffb4\021\uffb4\034\uffb4\001\002\000\020\005\uffe4\010\uffe4" +
    "\014\uffe4\015\uffe4\020\uffe4\021\uffe4\034\uffe4\001\002\000" +
    "\020\005\ufff0\010\ufff0\014\ufff0\015\ufff0\020\ufff0\021\ufff0" +
    "\034\ufff0\001\002\000\004\030\173\001\002\000\006\015" +
    "\171\030\uffb3\001\002\000\004\042\170\001\002\000\004" +
    "\030\uffb2\001\002\000\040\004\045\011\043\012\042\016" +
    "\040\023\032\026\030\031\051\032\050\033\047\035\023" +
    "\036\041\037\022\040\034\041\027\042\025\001\002\000" +
    "\020\005\ufff3\010\ufff3\014\ufff3\015\ufff3\020\ufff3\021\ufff3" +
    "\034\ufff3\001\002\000\004\024\200\001\002\000\004\010" +
    "\220\001\002\000\006\010\uffe2\024\200\001\002\000\010" +
    "\016\011\022\013\042\016\001\002\000\004\021\213\001" +
    "\002\000\004\017\206\001\002\000\010\005\uffe8\020\204" +
    "\021\uffe8\001\002\000\010\016\011\022\013\042\016\001" +
    "\002\000\006\005\uffe7\021\uffe7\001\002\000\006\016\040" +
    "\042\210\001\002\000\012\005\uffea\020\uffea\021\uffea\027" +
    "\211\001\002\000\024\005\uffec\010\uffec\013\uffec\014\uffec" +
    "\015\uffec\020\uffec\021\uffec\027\uffec\034\uffec\001\002\000" +
    "\040\004\045\011\043\012\042\016\040\023\032\026\030" +
    "\031\051\032\050\033\047\035\023\036\041\037\022\040" +
    "\034\041\027\042\025\001\002\000\012\005\uffe9\014\055" +
    "\020\uffe9\021\uffe9\001\002\000\004\007\214\001\002\000" +
    "\040\004\045\011\043\012\042\016\040\023\032\026\030" +
    "\031\051\032\050\033\047\035\023\036\041\037\022\040" +
    "\034\041\027\042\025\001\002\000\006\010\216\014\055" +
    "\001\002\000\006\010\uffe3\024\uffe3\001\002\000\004\010" +
    "\uffe1\001\002\000\020\005\ufff5\010\ufff5\014\ufff5\015\ufff5" +
    "\020\ufff5\021\ufff5\034\ufff5\001\002\000\004\002\000\001" +
    "\002\000\006\005\223\014\055\001\002\000\024\005\ufffc" +
    "\010\ufffc\013\ufffc\014\ufffc\015\ufffc\020\ufffc\021\ufffc\027" +
    "\ufffc\034\ufffc\001\002\000\024\005\ufffb\010\ufffb\013\ufffb" +
    "\014\ufffb\015\ufffb\020\ufffb\021\ufffb\027\ufffb\034\ufffb\001" +
    "\002\000\024\005\ufffa\010\ufffa\013\ufffa\014\ufffa\015\ufffa" +
    "\020\ufffa\021\ufffa\027\ufffa\034\ufffa\001\002\000\024\005" +
    "\uffeb\010\uffeb\013\uffeb\014\uffeb\015\uffeb\020\uffeb\021\uffeb" +
    "\027\uffeb\034\uffeb\001\002\000\026\005\ufffd\007\230\010" +
    "\ufffd\013\ufffd\014\ufffd\015\ufffd\020\ufffd\021\ufffd\027\ufffd" +
    "\034\ufffd\001\002\000\040\004\045\011\043\012\042\016" +
    "\040\023\032\026\030\031\051\032\050\033\047\035\023" +
    "\036\041\037\022\040\034\041\027\042\025\001\002\000" +
    "\004\010\235\001\002\000\012\005\uffee\010\uffee\014\055" +
    "\015\233\001\002\000\040\004\045\011\043\012\042\016" +
    "\040\023\032\026\030\031\051\032\050\033\047\035\023" +
    "\036\041\037\022\040\034\041\027\042\025\001\002\000" +
    "\006\005\uffed\010\uffed\001\002\000\024\005\uffd9\010\uffd9" +
    "\013\uffd9\014\uffd9\015\uffd9\020\uffd9\021\uffd9\027\uffd9\034" +
    "\uffd9\001\002\000\010\016\011\022\013\042\016\001\002" +
    "\000\004\005\240\001\002\000\004\007\241\001\002\000" +
    "\040\004\045\011\043\012\042\016\040\023\032\026\030" +
    "\031\051\032\050\033\047\035\023\036\041\037\022\040" +
    "\034\041\027\042\025\001\002\000\006\010\243\014\055" +
    "\001\002\000\020\005\ufff6\010\ufff6\014\ufff6\015\ufff6\020" +
    "\ufff6\021\ufff6\034\ufff6\001\002\000\040\004\045\011\043" +
    "\012\042\016\040\023\032\026\030\031\051\032\050\033" +
    "\047\035\023\036\041\037\022\040\034\041\027\042\025" +
    "\001\002\000\004\005\246\001\002\000\020\005\ufff2\010" +
    "\ufff2\014\ufff2\015\ufff2\020\ufff2\021\ufff2\034\ufff2\001\002" +
    "\000\004\004\250\001\002\000\040\004\045\011\043\012" +
    "\042\016\040\023\032\026\030\031\051\032\050\033\047" +
    "\035\023\036\041\037\022\040\034\041\027\042\025\001" +
    "\002\000\004\005\252\001\002\000\020\005\ufff8\010\ufff8" +
    "\014\ufff8\015\ufff8\020\ufff8\021\ufff8\034\ufff8\001\002\000" +
    "\012\005\uffbd\016\011\022\013\042\016\001\002\000\004" +
    "\005\uffbb\001\002\000\024\005\uffd2\010\uffd2\013\uffd2\014" +
    "\uffd2\015\uffd2\017\uffd2\020\uffd2\021\uffd2\034\uffd2\001\002" +
    "\000\024\005\uffbe\010\uffbe\013\uffbe\014\uffbe\015\uffbe\017" +
    "\uffbe\020\uffbe\021\uffbe\034\uffbe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\025\014\035\011\036\013\001\001\000\012\025\254\027" +
    "\065\030\255\043\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\030" +
    "\004\032\005\034\006\036\007\045\011\025\020\051\021" +
    "\035\022\052\023\043\024\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\030\004\225\020\051\021\035\022\052\023" +
    "\043\024\023\001\001\000\002\001\001\000\004\011\224" +
    "\001\001\000\004\011\223\001\001\000\002\001\001\000" +
    "\030\003\030\004\032\005\034\006\036\007\221\011\025" +
    "\020\051\021\035\022\052\023\043\024\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\166\001\001" +
    "\000\030\003\030\004\032\005\034\006\036\007\053\011" +
    "\025\020\051\021\035\022\052\023\043\024\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\030\004\032\005\034\006\165\011\025\020\051" +
    "\021\035\022\052\023\043\024\023\001\001\000\026\014" +
    "\056\015\075\025\057\027\065\030\066\031\067\032\070" +
    "\033\100\035\063\043\073\001\001\000\026\014\056\015" +
    "\164\025\057\027\065\030\066\031\067\032\070\033\100" +
    "\035\063\043\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\025\014\035\132" +
    "\001\001\000\006\025\014\035\131\001\001\000\002\001" +
    "\001\000\022\025\057\027\065\030\066\031\067\032\070" +
    "\033\127\035\063\043\073\001\001\000\002\001\001\000" +
    "\006\025\122\026\121\001\001\000\022\025\057\027\065" +
    "\030\066\031\067\032\070\033\107\035\063\043\073\001" +
    "\001\000\002\001\001\000\020\025\057\027\065\030\066" +
    "\031\067\032\106\035\063\043\073\001\001\000\002\001" +
    "\001\000\030\003\030\004\032\005\034\006\036\007\104" +
    "\011\025\020\051\021\035\022\052\023\043\024\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\025\057\027\065\030\066\031" +
    "\067\032\070\033\112\035\063\041\111\042\113\043\073" +
    "\001\001\000\026\025\057\027\065\030\066\031\067\032" +
    "\070\033\112\035\063\041\111\042\120\043\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\025\057\027\065\030\066\031\067\032\070\033\116" +
    "\035\063\043\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\025\122\026\124\001\001\000\002\001\001\000" +
    "\020\025\057\027\065\030\066\031\067\032\126\035\063" +
    "\043\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\025\057\027\065\030\066\031\067\032" +
    "\070\033\136\034\135\035\063\043\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\025\057\027\065\030" +
    "\066\031\067\032\070\033\136\034\140\035\063\043\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\025" +
    "\014\035\144\037\145\040\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\025\014\035" +
    "\144\037\145\040\147\001\001\000\002\001\001\000\006" +
    "\025\014\035\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\025\057\027\065\030\066\031\067\032\070" +
    "\033\154\035\063\043\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\025\057\027\065\030\066\031\067" +
    "\032\070\033\136\034\157\035\063\043\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\025\057\027\065" +
    "\030\066\031\067\032\070\033\136\034\162\035\063\043" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\044\171\001\001\000\002\001\001\000\026" +
    "\003\030\004\032\005\034\006\173\011\025\020\051\021" +
    "\035\022\052\023\043\024\023\001\001\000\002\001\001" +
    "\000\006\016\176\017\175\001\001\000\002\001\001\000" +
    "\006\016\176\017\216\001\001\000\012\012\202\013\200" +
    "\025\014\035\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\012\202\013\204\025\014" +
    "\035\201\001\001\000\002\001\001\000\004\011\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\030" +
    "\004\032\005\034\006\036\007\211\011\025\020\051\021" +
    "\035\022\052\023\043\024\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\030\004\032\005\034\006" +
    "\036\007\214\011\025\020\051\021\035\022\052\023\043" +
    "\024\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\003\030" +
    "\004\032\005\034\006\036\007\231\010\230\011\025\020" +
    "\051\021\035\022\052\023\043\024\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\030\004\032\005" +
    "\034\006\036\007\231\010\233\011\025\020\051\021\035" +
    "\022\052\023\043\024\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\202\013\236\025\014\035\201" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
    "\030\004\032\005\034\006\036\007\241\011\025\020\051" +
    "\021\035\022\052\023\043\024\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\003\030\004\032\005\034" +
    "\006\036\007\231\010\244\011\025\020\051\021\035\022" +
    "\052\023\043\024\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\030\004\032\005" +
    "\034\006\036\007\231\010\250\011\025\020\051\021\035" +
    "\022\052\023\043\024\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\025\014\035\011\036\253\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public coop.rchain.syntax.rholang.Absyn.Contr pContr() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (coop.rchain.syntax.rholang.Absyn.Contr) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ListName ::= Name _SYMB_9 ListName 
            {
              coop.rchain.syntax.rholang.Absyn.ListName RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListName p_3 = (coop.rchain.syntax.rholang.Absyn.ListName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListName",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ListName ::= Name 
            {
              coop.rchain.syntax.rholang.Absyn.ListName RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListName(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListName",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ListVar ::= Var _SYMB_9 ListVar 
            {
              coop.rchain.syntax.rholang.Absyn.ListVar RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListVar p_3 = (coop.rchain.syntax.rholang.Absyn.ListVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVar",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ListVar ::= Var 
            {
              coop.rchain.syntax.rholang.Absyn.ListVar RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListVar(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVar",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ValPattern ::= Var _SYMB_3 ListPPattern _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.ValPattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VPtStruct(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValPattern",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ListPatternPatternMatch ::= PatternPatternMatch ListPatternPatternMatch 
            {
              coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PatternPatternMatch p_1 = (coop.rchain.syntax.rholang.Absyn.PatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch p_2 = (coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternPatternMatch",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ListPatternPatternMatch ::= PatternPatternMatch 
            {
              coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PatternPatternMatch p_1 = (coop.rchain.syntax.rholang.Absyn.PatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternPatternMatch",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PatternPatternMatch ::= PPattern _SYMB_13 _SYMB_3 PPattern _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.PatternPatternMatch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.PPattern p_4 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PtBranch(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PatternPatternMatch",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ListPatternBind ::= PatternBind _SYMB_12 ListPatternBind 
            {
              coop.rchain.syntax.rholang.Absyn.ListPatternBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PatternBind p_1 = (coop.rchain.syntax.rholang.Absyn.PatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListPatternBind p_3 = (coop.rchain.syntax.rholang.Absyn.ListPatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternBind",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ListPatternBind ::= PatternBind 
            {
              coop.rchain.syntax.rholang.Absyn.ListPatternBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PatternBind p_1 = (coop.rchain.syntax.rholang.Absyn.PatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPatternBind(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPatternBind",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PatternBind ::= CPattern _SYMB_11 CPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PatternBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.CPattern p_3 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PtBind(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PatternBind",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ListCPattern ::= CPattern _SYMB_9 ListCPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListCPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListCPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListCPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCPattern",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ListCPattern ::= CPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListCPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListCPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCPattern",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ListCPattern ::= 
            {
              coop.rchain.syntax.rholang.Absyn.ListCPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListCPattern(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCPattern",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CPattern ::= _SYMB_10 PPattern3 
            {
              coop.rchain.syntax.rholang.Absyn.CPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_2 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CPtQuote(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CPattern",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CPattern ::= VarPattern 
            {
              coop.rchain.syntax.rholang.Absyn.CPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.VarPattern p_1 = (coop.rchain.syntax.rholang.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CPtVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CPattern",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ListPPattern ::= PPattern _SYMB_9 ListPPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListPPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPPattern",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ListPPattern ::= PPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListPPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPPattern",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ListPPattern ::= 
            {
              coop.rchain.syntax.rholang.Absyn.ListPPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPPattern(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPPattern",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PPattern ::= PPattern1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PPattern ::= PPattern _SYMB_8 PPattern1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.PPattern p_3 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtPar(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PPattern1 ::= PPattern2 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PPattern1 ::= Name _SYMB_0 ListPPattern _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtConstr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PPattern1 ::= _SYMB_22 ListVarPattern _SYMB_20 PPattern1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListVarPattern p_2 = (coop.rchain.syntax.rholang.Absyn.ListVarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.PPattern p_4 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtNew(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PPattern1 ::= _SYMB_21 PPattern _SYMB_24 ListPatternPatternMatch 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_2 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch p_4 = (coop.rchain.syntax.rholang.Absyn.ListPatternPatternMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtMatch(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PPattern1 ::= _SYMB_18 _SYMB_0 ListPatternBind _SYMB_1 _SYMB_3 PPattern _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListPatternBind p_3 = (coop.rchain.syntax.rholang.Absyn.ListPatternBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.PPattern p_6 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtInput(p_3,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern1",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PPattern2 ::= PPattern3 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern2",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PPattern2 ::= CPattern _SYMB_7 _SYMB_0 ListPPattern _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.ListPPattern p_4 = (coop.rchain.syntax.rholang.Absyn.ListPPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtOutput(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern2",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PPattern3 ::= PPattern4 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern3",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PPattern3 ::= _SYMB_6 CPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_2 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtInject(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern3",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PPattern3 ::= _SYMB_5 CPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_2 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtDrop(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern3",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PPattern4 ::= _SYMB_0 PPattern _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_2 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern4",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PPattern4 ::= ValPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ValPattern p_1 = (coop.rchain.syntax.rholang.Absyn.ValPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtVal(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern4",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PPattern4 ::= _SYMB_15 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtNil(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern4",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PPattern4 ::= VarPattern 
            {
              coop.rchain.syntax.rholang.Absyn.PPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.VarPattern p_1 = (coop.rchain.syntax.rholang.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPtVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PPattern4",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ListVarPattern ::= VarPattern _SYMB_9 ListVarPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListVarPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.VarPattern p_1 = (coop.rchain.syntax.rholang.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListVarPattern p_3 = (coop.rchain.syntax.rholang.Absyn.ListVarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVarPattern",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ListVarPattern ::= VarPattern 
            {
              coop.rchain.syntax.rholang.Absyn.ListVarPattern RESULT =null;
		coop.rchain.syntax.rholang.Absyn.VarPattern p_1 = (coop.rchain.syntax.rholang.Absyn.VarPattern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListVarPattern(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVarPattern",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ListVarPattern ::= 
            {
              coop.rchain.syntax.rholang.Absyn.ListVarPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListVarPattern(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVarPattern",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VarPattern ::= _SYMB_14 
            {
              coop.rchain.syntax.rholang.Absyn.VarPattern RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VarPtWild(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarPattern",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VarPattern ::= Var 
            {
              coop.rchain.syntax.rholang.Absyn.VarPattern RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VarPtVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarPattern",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Collect ::= _STRING_ 
            {
              coop.rchain.syntax.rholang.Absyn.Collect RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CString(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Collect",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Struct ::= Var _SYMB_3 ListProc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Struct RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		coop.rchain.syntax.rholang.Absyn.ListProc p_3 = (coop.rchain.syntax.rholang.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.StructConstr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Struct",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Entity ::= Collect 
            {
              coop.rchain.syntax.rholang.Absyn.Entity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Collect p_1 = (coop.rchain.syntax.rholang.Absyn.Collect)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ECollect(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Entity ::= Struct 
            {
              coop.rchain.syntax.rholang.Absyn.Entity RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Struct p_1 = (coop.rchain.syntax.rholang.Absyn.Struct)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.EStruct(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Entity ::= _CHAR_ 
            {
              coop.rchain.syntax.rholang.Absyn.Entity RESULT =null;
		Character p_1 = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.EChar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Quantity ::= _DOUBLE_ 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QDouble(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Quantity ::= _INTEGER_ 
            {
              coop.rchain.syntax.rholang.Absyn.Quantity RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.QInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantity",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Value ::= Entity 
            {
              coop.rchain.syntax.rholang.Absyn.Value RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Entity p_1 = (coop.rchain.syntax.rholang.Absyn.Entity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VEnt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Value",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Value ::= Quantity 
            {
              coop.rchain.syntax.rholang.Absyn.Value RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Quantity p_1 = (coop.rchain.syntax.rholang.Absyn.Quantity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.VQuant(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Value",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ListCBranch ::= CBranch ListCBranch 
            {
              coop.rchain.syntax.rholang.Absyn.ListCBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CBranch p_1 = (coop.rchain.syntax.rholang.Absyn.CBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		coop.rchain.syntax.rholang.Absyn.ListCBranch p_2 = (coop.rchain.syntax.rholang.Absyn.ListCBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCBranch",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ListCBranch ::= CBranch 
            {
              coop.rchain.syntax.rholang.Absyn.ListCBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CBranch p_1 = (coop.rchain.syntax.rholang.Absyn.CBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListCBranch(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCBranch",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CBranch ::= _SYMB_16 ListBind _SYMB_13 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.CBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListBind p_2 = (coop.rchain.syntax.rholang.Absyn.ListBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_5 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.Choice(p_2,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CBranch",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ListPMBranch ::= PMBranch ListPMBranch 
            {
              coop.rchain.syntax.rholang.Absyn.ListPMBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PMBranch p_1 = (coop.rchain.syntax.rholang.Absyn.PMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		coop.rchain.syntax.rholang.Absyn.ListPMBranch p_2 = (coop.rchain.syntax.rholang.Absyn.ListPMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPMBranch",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ListPMBranch ::= PMBranch 
            {
              coop.rchain.syntax.rholang.Absyn.ListPMBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PMBranch p_1 = (coop.rchain.syntax.rholang.Absyn.PMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListPMBranch(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPMBranch",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PMBranch ::= PPattern _SYMB_13 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.PMBranch RESULT =null;
		coop.rchain.syntax.rholang.Absyn.PPattern p_1 = (coop.rchain.syntax.rholang.Absyn.PPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_4 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PatternMatch(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PMBranch",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ListBind ::= Bind _SYMB_12 ListBind 
            {
              coop.rchain.syntax.rholang.Absyn.ListBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Bind p_1 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListBind p_3 = (coop.rchain.syntax.rholang.Absyn.ListBind)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListBind",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ListBind ::= Bind 
            {
              coop.rchain.syntax.rholang.Absyn.ListBind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Bind p_1 = (coop.rchain.syntax.rholang.Absyn.Bind)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListBind(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListBind",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Bind ::= CPattern _SYMB_11 Chan _SYMB_19 Proc 
            {
              coop.rchain.syntax.rholang.Absyn.Bind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Chan p_3 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_5 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CondInputBind(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bind",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Bind ::= CPattern _SYMB_11 Chan 
            {
              coop.rchain.syntax.rholang.Absyn.Bind RESULT =null;
		coop.rchain.syntax.rholang.Absyn.CPattern p_1 = (coop.rchain.syntax.rholang.Absyn.CPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Chan p_3 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.InputBind(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bind",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Chan ::= _SYMB_10 Proc3 
            {
              coop.rchain.syntax.rholang.Absyn.Chan RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_2 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CQuote(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Chan",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Chan ::= Var 
            {
              coop.rchain.syntax.rholang.Absyn.Chan RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.CVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Chan",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ListProc ::= Proc _SYMB_9 ListProc 
            {
              coop.rchain.syntax.rholang.Absyn.ListProc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListProc p_3 = (coop.rchain.syntax.rholang.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListProc",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ListProc ::= Proc 
            {
              coop.rchain.syntax.rholang.Absyn.ListProc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.ListProc(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListProc",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Proc ::= Proc1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Proc ::= Proc _SYMB_8 Proc1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_3 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PPar(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Proc1 ::= Proc2 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Proc1 ::= Name _SYMB_0 ListProc _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		coop.rchain.syntax.rholang.Absyn.ListProc p_3 = (coop.rchain.syntax.rholang.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PConstr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Proc1 ::= _SYMB_22 ListVar _SYMB_20 Proc1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListVar p_2 = (coop.rchain.syntax.rholang.Absyn.ListVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_4 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PNew(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Proc1 ::= _SYMB_21 Proc _SYMB_24 ListPMBranch 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_2 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		coop.rchain.syntax.rholang.Absyn.ListPMBranch p_4 = (coop.rchain.syntax.rholang.Absyn.ListPMBranch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PMatch(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Proc1 ::= _SYMB_23 _SYMB_3 ListCBranch _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListCBranch p_3 = (coop.rchain.syntax.rholang.Absyn.ListCBranch)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PChoice(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Proc1 ::= _SYMB_18 _SYMB_0 ListBind _SYMB_1 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.ListBind p_3 = (coop.rchain.syntax.rholang.Absyn.ListBind)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_6 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PInput(p_3,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Proc2 ::= Proc3 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc2",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Proc2 ::= Chan _SYMB_7 _SYMB_0 ListProc _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Chan p_1 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		coop.rchain.syntax.rholang.Absyn.ListProc p_4 = (coop.rchain.syntax.rholang.Absyn.ListProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PLift(p_1,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc2",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Proc3 ::= Proc4 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_1 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc3",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Proc3 ::= _SYMB_6 Chan 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Chan p_2 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PInject(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc3",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Proc3 ::= _SYMB_5 Chan 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Chan p_2 = (coop.rchain.syntax.rholang.Absyn.Chan)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PDrop(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc3",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Proc4 ::= _SYMB_0 Proc _SYMB_1 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Proc p_2 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc4",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Proc4 ::= Var 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc4",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Proc4 ::= Value 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Value p_1 = (coop.rchain.syntax.rholang.Absyn.Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PValue(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc4",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Proc4 ::= _SYMB_15 
            {
              coop.rchain.syntax.rholang.Absyn.Proc RESULT =null;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.PNil(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc4",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Contr ::= _SYMB_17 Name _SYMB_0 ListCPattern _SYMB_1 _SYMB_2 _SYMB_3 Proc _SYMB_4 
            {
              coop.rchain.syntax.rholang.Absyn.Contr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		coop.rchain.syntax.rholang.Absyn.ListCPattern p_4 = (coop.rchain.syntax.rholang.Absyn.ListCPattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		coop.rchain.syntax.rholang.Absyn.Proc p_8 = (coop.rchain.syntax.rholang.Absyn.Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new coop.rchain.syntax.rholang.Absyn.DContr(p_2,p_4,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Contr",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Contr EOF 
            {
              Object RESULT =null;
		coop.rchain.syntax.rholang.Absyn.Contr start_val = (coop.rchain.syntax.rholang.Absyn.Contr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

