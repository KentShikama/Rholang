
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jun 29 14:15:54 EDT 2016
//----------------------------------------------------

package rholang.parsing.lambda;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jun 29 14:15:54 EDT 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\022\000\002\002\004\000\002\002\005\000\002\002" +
    "\003\000\002\002\013\000\002\002\007\000\002\002\005" +
    "\000\002\003\007\000\002\003\011\000\002\004\003\000" +
    "\002\004\003\000\002\005\003\000\002\005\005\000\002" +
    "\006\003\000\002\006\003\000\002\007\005\000\002\007" +
    "\003\000\002\010\007\000\002\010\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\012\005\006\013\004\014\010\016\012\001" +
    "\002\000\022\002\ufff8\005\ufff8\007\ufff8\010\ufff8\012\ufff8" +
    "\013\ufff8\014\ufff8\016\ufff8\001\002\000\022\002\uffff\005" +
    "\uffff\007\uffff\010\uffff\012\uffff\013\uffff\014\uffff\016\uffff" +
    "\001\002\000\012\005\006\013\004\014\010\016\044\001" +
    "\002\000\014\002\037\005\006\013\004\014\010\016\012" +
    "\001\002\000\022\002\ufff9\005\ufff9\007\ufff9\010\ufff9\012" +
    "\ufff9\013\ufff9\014\ufff9\016\ufff9\001\002\000\004\004\034" +
    "\001\002\000\004\004\013\001\002\000\006\005\016\015" +
    "\017\001\002\000\026\002\ufff5\005\ufff5\006\ufff5\007\ufff5" +
    "\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\016\ufff5\001" +
    "\002\000\022\002\000\005\000\007\000\010\000\012\000" +
    "\013\000\014\000\016\000\001\002\000\006\005\016\015" +
    "\017\001\002\000\026\002\ufff7\005\ufff7\006\ufff7\007\ufff7" +
    "\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\016\ufff7\001" +
    "\002\000\026\002\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4" +
    "\011\ufff4\012\ufff4\013\ufff4\014\ufff4\016\ufff4\001\002\000" +
    "\026\002\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\022" +
    "\012\ufff2\013\ufff2\014\ufff2\016\ufff2\001\002\000\006\005" +
    "\016\015\017\001\002\000\024\002\ufff3\005\ufff3\006\ufff3" +
    "\007\ufff3\010\ufff3\012\ufff3\013\ufff3\014\ufff3\016\ufff3\001" +
    "\002\000\006\007\026\010\025\001\002\000\006\005\016" +
    "\015\017\001\002\000\026\002\ufff6\005\ufff6\006\ufff6\007" +
    "\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\016\ufff6" +
    "\001\002\000\006\007\031\010\030\001\002\000\006\005" +
    "\016\015\017\001\002\000\026\002\ufff1\005\ufff1\006\ufff1" +
    "\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\016" +
    "\ufff1\001\002\000\004\007\033\001\002\000\026\002\ufff0" +
    "\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013" +
    "\ufff0\014\ufff0\016\ufff0\001\002\000\006\005\016\015\017" +
    "\001\002\000\022\002\ufffc\005\ufffc\007\ufffc\010\ufffc\012" +
    "\ufffc\013\ufffc\014\ufffc\016\ufffc\001\002\000\014\005\006" +
    "\012\040\013\004\014\010\016\012\001\002\000\004\002" +
    "\001\001\002\000\004\004\041\001\002\000\006\005\016" +
    "\015\017\001\002\000\022\002\ufffd\005\ufffd\007\ufffd\010" +
    "\ufffd\012\ufffd\013\ufffd\014\ufffd\016\ufffd\001\002\000\014" +
    "\005\006\010\054\013\004\014\010\016\012\001\002\000" +
    "\004\004\045\001\002\000\006\005\016\015\017\001\002" +
    "\000\016\005\000\006\047\010\000\013\000\014\000\016" +
    "\000\001\002\000\012\005\006\013\004\014\010\016\012" +
    "\001\002\000\014\005\006\007\051\013\004\014\010\016" +
    "\012\001\002\000\004\004\052\001\002\000\006\005\016" +
    "\015\017\001\002\000\022\002\ufffe\005\ufffe\007\ufffe\010" +
    "\ufffe\012\ufffe\013\ufffe\014\ufffe\016\ufffe\001\002\000\012" +
    "\005\006\013\004\014\010\016\012\001\002\000\016\005" +
    "\006\007\057\010\056\013\004\014\010\016\012\001\002" +
    "\000\012\005\006\013\004\014\010\016\012\001\002\000" +
    "\004\004\ufffb\001\002\000\014\005\006\007\061\013\004" +
    "\014\010\016\012\001\002\000\004\004\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\010\002\006\003\010\004\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\042\003\010" +
    "\004\004\001\001\000\010\002\035\003\010\004\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\017\006\020\007\014\010\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\017\006\020" +
    "\007\023\010\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\017\006\020\007\022" +
    "\010\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\017\006\020\007\026\010\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\017\006\020\007" +
    "\031\010\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\017\006\020\007\034\010" +
    "\013\001\001\000\002\001\001\000\010\002\035\003\010" +
    "\004\004\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\017\006\020\007\041\010\013\001\001\000\002" +
    "\001\001\000\010\002\035\003\010\004\004\001\001\000" +
    "\002\001\001\000\012\005\017\006\020\007\045\010\013" +
    "\001\001\000\002\001\001\000\010\002\047\003\010\004" +
    "\004\001\001\000\010\002\035\003\010\004\004\001\001" +
    "\000\002\001\001\000\012\005\017\006\020\007\052\010" +
    "\013\001\001\000\002\001\001\000\010\002\054\003\010" +
    "\004\004\001\001\000\010\002\035\003\010\004\004\001" +
    "\001\000\010\002\057\003\010\004\004\001\001\000\002" +
    "\001\001\000\010\002\035\003\010\004\004\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public rholang.parsing.lambda.Absyn.Expr pExpr() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (rholang.parsing.lambda.Absyn.Expr) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TType ::= _SYMB_1 Type _SYMB_4 Type _SYMB_4 Type _SYMB_3 
            {
              rholang.parsing.lambda.Absyn.TType RESULT =null;
		rholang.parsing.lambda.Absyn.Type p_2 = (rholang.parsing.lambda.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		rholang.parsing.lambda.Absyn.Type p_4 = (rholang.parsing.lambda.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		rholang.parsing.lambda.Absyn.Type p_6 = (rholang.parsing.lambda.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.lambda.Absyn.TType3(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TType",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TType ::= _SYMB_1 Type _SYMB_4 Type _SYMB_3 
            {
              rholang.parsing.lambda.Absyn.TType RESULT =null;
		rholang.parsing.lambda.Absyn.Type p_2 = (rholang.parsing.lambda.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		rholang.parsing.lambda.Absyn.Type p_4 = (rholang.parsing.lambda.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.lambda.Absyn.TType2(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TType",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= Type1 
            {
              rholang.parsing.lambda.Absyn.Type RESULT =null;
		rholang.parsing.lambda.Absyn.Type p_1 = (rholang.parsing.lambda.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= Type1 _SYMB_5 Type 
            {
              rholang.parsing.lambda.Absyn.Type RESULT =null;
		rholang.parsing.lambda.Absyn.Type p_1 = (rholang.parsing.lambda.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.lambda.Absyn.Type p_3 = (rholang.parsing.lambda.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rholang.parsing.lambda.Absyn.TFun(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type1 ::= Type2 
            {
              rholang.parsing.lambda.Absyn.Type RESULT =null;
		rholang.parsing.lambda.Absyn.Type p_1 = (rholang.parsing.lambda.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type1 ::= TType 
            {
              rholang.parsing.lambda.Absyn.Type RESULT =null;
		rholang.parsing.lambda.Absyn.TType p_1 = (rholang.parsing.lambda.Absyn.TType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rholang.parsing.lambda.Absyn.TTuple(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type1",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type2 ::= _SYMB_1 Type _SYMB_3 
            {
              rholang.parsing.lambda.Absyn.Type RESULT =null;
		rholang.parsing.lambda.Absyn.Type p_2 = (rholang.parsing.lambda.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type2",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type2 ::= SimpleType 
            {
              rholang.parsing.lambda.Absyn.Type RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rholang.parsing.lambda.Absyn.TSimple(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type2",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Value ::= _STRING_ 
            {
              rholang.parsing.lambda.Absyn.Value RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rholang.parsing.lambda.Absyn.VString(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Value",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Value ::= _INTEGER_ 
            {
              rholang.parsing.lambda.Absyn.Value RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rholang.parsing.lambda.Absyn.VInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Value",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Tuple ::= _SYMB_1 Expr _SYMB_4 Expr _SYMB_4 Expr _SYMB_3 
            {
              rholang.parsing.lambda.Absyn.Tuple RESULT =null;
		rholang.parsing.lambda.Absyn.Expr p_2 = (rholang.parsing.lambda.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		rholang.parsing.lambda.Absyn.Expr p_4 = (rholang.parsing.lambda.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		rholang.parsing.lambda.Absyn.Expr p_6 = (rholang.parsing.lambda.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.lambda.Absyn.Tuple3(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tuple",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Tuple ::= _SYMB_1 Expr _SYMB_4 Expr _SYMB_3 
            {
              rholang.parsing.lambda.Absyn.Tuple RESULT =null;
		rholang.parsing.lambda.Absyn.Expr p_2 = (rholang.parsing.lambda.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		rholang.parsing.lambda.Absyn.Expr p_4 = (rholang.parsing.lambda.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new rholang.parsing.lambda.Absyn.Tuple2(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tuple",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Expr ::= Tuple _SYMB_0 Type 
            {
              rholang.parsing.lambda.Absyn.Expr RESULT =null;
		rholang.parsing.lambda.Absyn.Tuple p_1 = (rholang.parsing.lambda.Absyn.Tuple)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.lambda.Absyn.Type p_3 = (rholang.parsing.lambda.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rholang.parsing.lambda.Absyn.ETuple(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Expr ::= Expr Expr _SYMB_6 _SYMB_0 Type 
            {
              rholang.parsing.lambda.Absyn.Expr RESULT =null;
		rholang.parsing.lambda.Absyn.Expr p_1 = (rholang.parsing.lambda.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		rholang.parsing.lambda.Absyn.Expr p_2 = (rholang.parsing.lambda.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		rholang.parsing.lambda.Absyn.Type p_5 = (rholang.parsing.lambda.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rholang.parsing.lambda.Absyn.EApp(p_1,p_2,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Expr ::= _SYMB_1 Var _SYMB_0 Type _SYMB_2 Expr _SYMB_3 _SYMB_0 Type 
            {
              rholang.parsing.lambda.Absyn.Expr RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		rholang.parsing.lambda.Absyn.Type p_4 = (rholang.parsing.lambda.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		rholang.parsing.lambda.Absyn.Expr p_6 = (rholang.parsing.lambda.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		rholang.parsing.lambda.Absyn.Type p_9 = (rholang.parsing.lambda.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rholang.parsing.lambda.Absyn.EAbs(p_2,p_4,p_6,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Expr ::= Value 
            {
              rholang.parsing.lambda.Absyn.Expr RESULT =null;
		rholang.parsing.lambda.Absyn.Value p_1 = (rholang.parsing.lambda.Absyn.Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rholang.parsing.lambda.Absyn.EVal(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Expr ::= Var _SYMB_0 Type 
            {
              rholang.parsing.lambda.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rholang.parsing.lambda.Absyn.Type p_3 = (rholang.parsing.lambda.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rholang.parsing.lambda.Absyn.EVar(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Expr EOF 
            {
              Object RESULT =null;
		rholang.parsing.lambda.Absyn.Expr start_val = (rholang.parsing.lambda.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

