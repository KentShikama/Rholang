// -*- Java -*- This Cup file was machine-generated by BNFC
package parsing.lambda;

parser code {:
  public parsing.lambda.Absyn.Expr pExpr() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (parsing.lambda.Absyn.Expr) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal parsing.lambda.Absyn.Expr Expr;
nonterminal parsing.lambda.Absyn.ListExpr ListExpr;
nonterminal parsing.lambda.Absyn.Value Value;

terminal _SYMB_0;    //   (
terminal _SYMB_1;    //   )
terminal _SYMB_2;    //   ,
terminal _SYMB_3;    //   apply



terminal Integer _INTEGER_;

terminal String _IDENT_;



start with Expr;


Expr ::= _IDENT_:p_1  {: RESULT = new parsing.lambda.Absyn.EVar(p_1); :} 
  | Value:p_1  {: RESULT = new parsing.lambda.Absyn.EVal(p_1); :}
  | _SYMB_0 _IDENT_:p_2 Expr:p_3 _SYMB_1  {: RESULT = new parsing.lambda.Absyn.EAbs(p_2,p_3); :}
  | Expr:p_1 Expr:p_2 _SYMB_3  {: RESULT = new parsing.lambda.Absyn.EApp(p_1,p_2); :}
  | _SYMB_0 ListExpr:p_2 _SYMB_1  {: RESULT = new parsing.lambda.Absyn.ETuple(p_2); :}
;
ListExpr ::= Expr:p_1  {: RESULT = new parsing.lambda.Absyn.ListExpr(); RESULT.addLast(p_1); :} 
  | Expr:p_1 _SYMB_2 ListExpr:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
Value ::= _INTEGER_:p_1  {: RESULT = new parsing.lambda.Absyn.VInt(p_1); :} 
;

