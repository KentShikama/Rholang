EVar.   Expr ::= Var ":" Type ;
EVal.   Expr ::= Value ;
EAbs.   Expr ::= "(" Var ":" Type "." Expr ")" ":" FType ;
EApp.   Expr ::= Expr Expr "apply" ":" Type ;
ETuple. Expr ::= "(" Expr "," Expr ")" ":" TType ;

VInt.   Value ::= Integer ;
VString. Value ::= String ;

TSimple.      Type2 ::= SimpleType ;
TTuple.       Type1 ::= TType ;
TFun.         Type  ::= FType ;
coercions Type 2 ;

FunType.      FType ::= Type1 "->" Type ;

TupleType.    TType ::= "(" Type "," Type ")" ;

token SimpleType (upper (letter | digit | '_' | '\'')*) ;
token Var (lower (letter | digit | '_' | '\'')*) ;