
-- Top level contract declaration
DContr. Contr ::= "contract" Ident "(" [Arg] ")" "=" "{" Proc "}" ;

separator nonempty Ident "," ;

-- Processes
PNil.    Proc ::= "Nil" ;
PInput.  Proc ::= "for" "(" [Bind] ")" "{" Proc "}" ;
PChoice. Proc ::= "select" "{" [CBranch] "}" ;
PMatch.  Proc ::= "match" Ident "{" [PMBranch] "}" ; -- should be Proc instead of Ident
POutput. Proc ::= Chan "!" "(" [Ident] ")" ; -- should be Proc instead of Ident
PPar.    Proc ::= Proc "|" Proc ;
PDrop.   Proc ::= "*" Proc ;
PNew.    Proc ::= "new" [Ident] "in" Proc ;
PConstr. Proc ::= Ident "(" [Ident] ")" ; -- should be Proc instead of Ident
PValue.  Proc ::= Value ;
separator nonempty Proc "," ; -- Might make sense to not have this nonempty, to allow pure synchronization?

ArgPattern. Arg ::= Pattern ;
ArgIdent.   Arg ::= Ident ;
separator nonempty Arg "," ;

PatternMatch. PMBranch ::= Pattern "=>" "{" Proc "}" ;
separator nonempty PMBranch "" ; 

-- Pattern matching
PtNil.    Pattern ::= "Nil" ;
--PtInput.  Pattern ::= "for" ;
PtOutput. Pattern ::= Chan "!" "(" [Pattern] ")" ;
PtPar.    Pattern ::= Pattern "|" Pattern ;
PtDrop.   Pattern ::= "*" Chan ;
PtConstr. Pattern ::= Ident "(" [Pattern] ")" ;
PtVal.    Pattern ::= VPattern ;
PtMatch.  Pattern ::= "match" Pattern "{" [Ident] "}" ;
separator nonempty Pattern "," ;

-- VPtString. VPattern ::=  ;
-- VPtArray.  VPattern ::=  ;
-- VPtList.   VPattern ::=  ;
VPtStruct. VPattern ::= Ident "{" [Ident] "}" ; -- second Ident should be Proc

Choice. CBranch ::= "case" [Bind] "=>" "{" Proc "}" ;
separator nonempty CBranch "" ;

-- Variable binding
Bind. Bind ::= Arg "<-" Chan ;
separator nonempty Bind ";" ;

-- Channels
ChanAddr. Chan ::= Addr ;
ChanVar.  Chan ::= Ident ;

-- AddrHash. Addr ::= Hash ;
AddrLift. Addr ::= "@" Proc ;

VQuant.   Value    ::= Quantity ;
VEnt.     Value    ::= Entity ;
-- QBool.    Quantity ::= Boolean ;
QInt.     Quantity ::= Integer ;
QDouble.  Quantity ::= Double ;
EChar.    Entity   ::= Char ;
-- EDate.    Entity   ::= Datetime ;
EStruct.  Entity   ::= Struct ;
ECollect. Entity   ::= Collect ;

Struct. Struct ::= Ident "{" [Proc] "}" ;

CString. Collect ::= String ;
-- CArray.  Collect ::= Array ;
-- CList.   Collect ::= List ;