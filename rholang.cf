
-- Top level contract declaration
DContr. Contr ::= "contract" Name "(" [Pattern] ")" "=" "{" Proc "}" ;

separator nonempty Ident "," ;

token Name (upper (letter | digit | '_' | '\'')*) ;
token Var (lower (letter | digit | '_' | '\'')*) ;

separator nonempty Var "," ;
separator nonempty Name "," ;

-- Processes
PNil.    Proc ::= "Nil" ;
PValue.  Proc ::= Value ;
PVar.    Proc ::= Var ; -- induces reduce/reduce conflicts :(
PInput.  Proc ::= "for" "(" [Bind] ")" "{" Proc "}" ;
PChoice. Proc ::= "select" "{" [CBranch] "}" ;
PMatch.  Proc ::= "match" Proc "{" [PMBranch] "}" ; -- should be Proc instead of Var
PLift.   Proc ::= Chan "!" "(" [Proc] ")" ; -- should be Proc instead of Var
POutput. Proc ::= Chan "!" "(" [Var] ")" ;
PPar.    Proc ::= Proc "|" Proc ;
PDrop.   Proc ::= "*" Chan ;
PNew.    Proc ::= "new" [Var] "in" Proc ;
PConstr. Proc ::= Name "(" [Proc] ")" ; -- should be Proc instead of Var
separator nonempty Proc "," ; -- Might make sense to not have this nonempty, to allow pure synchronization?

-- Channels
ChanAddr. Chan ::= Addr ;
ChanVar.  Chan ::= Var ;

--ArgPattern. Arg ::= Pattern ;
--ArgVar.     Arg ::= Var ;
--separator nonempty Arg "," ;

PatternMatch. PMBranch ::= Pattern "=>" "{" Proc "}" ;
separator nonempty PMBranch "" ; 

-- Pattern matching
PtWild.   Pattern ::= "_" ;
PtVar.    Pattern ::= Var ;
PtNil.    Pattern ::= "Nil" ;
--PtInput.  Pattern ::= "for" ;
PtOutput. Pattern ::= Chan "!" "(" [Pattern] ")" ;
PtPar.    Pattern ::= Pattern "|" Pattern ;
PtDrop.   Pattern ::= "*" Chan ;
PtConstr. Pattern ::= Name "(" [Pattern] ")" ;
PtVal.    Pattern ::= VPattern ;
-- PtMatch.  Pattern ::= "match" Pattern "{" [Ident] "}" ; -- does this really make sense?
separator nonempty Pattern "," ;

-- VPtString. VPattern ::=  ;
-- VPtArray.  VPattern ::=  ;
-- VPtList.   VPattern ::=  ;
VPtStruct. VPattern ::= Var "{" [Proc] "}" ; -- second Ident should be Proc

Choice. CBranch ::= "case" [Bind] "=>" "{" Proc "}" ;
separator nonempty CBranch "" ;

-- Variable binding
Bind. Bind ::= Pattern "<-" Chan ;
separator nonempty Bind ";" ;

-- AddrHash. Addr ::= Hash ;
AddrQuote. Addr ::= "@" Proc ;

VQuant.   Value    ::= Quantity ;
VEnt.     Value    ::= Entity ;
-- QBool.    Quantity ::= Boolean ;
QInt.     Quantity ::= Integer ;
QDouble.  Quantity ::= Double ;
EChar.    Entity   ::= Char ;
-- EDate.    Entity   ::= Datetime ;
EStruct.  Entity   ::= Struct ;
ECollect. Entity   ::= Collect ;

Struct. Struct ::= Var "{" [Proc] "}" ;

CString. Collect ::= String ;
-- CArray.  Collect ::= Array ;
-- CList.   Collect ::= List ;