
-- Top level contract declaration
DContr. Contr ::= "contract" Name "(" [PPattern] ")" "=" "{" Proc "}" ;

separator nonempty Ident "," ;

token Name (upper (letter | digit | '_' | '\'')*) ;
token Var (lower (letter | digit | '_' | '\'')*) ;

separator nonempty Var "," ;
separator nonempty Name "," ;

EProc.   Expr ::= Proc ;
EVar.    Expr ::= Var ;
--EValue.  Expr ::= Value ;
EChan.   Expr ::= Addr ;
separator nonempty Expr "," ;

-- Processes
PNil.    Proc2 ::= "Nil" ;
PValue.  Proc2 ::= Value ;
--PVar.    Proc ::= Var ; -- induces reduce/reduce conflicts :(
PInput.  Proc1 ::= "for" "(" [Bind] ")" "{" Proc "}" ;
PChoice. Proc1 ::= "select" "{" [CBranch] "}" ;
PMatch.  Proc1 ::= "match" Expr "with" [PMBranch] ; -- should be Proc instead of Var
PLift.   Proc1 ::= Chan "!" "(" [Expr] ")" ; -- should be Proc instead of Var
PDrop.   Proc1 ::= "*" Chan ;
PNew.    Proc1 ::= "new" [Var] "in" Proc1 ;
PConstr. Proc1 ::= Name "(" [Expr] ")" ; -- should be Proc instead of Var
PPar.    Proc  ::= Proc "|" Proc1 ;
separator nonempty Proc "," ; -- Might make sense to not have this nonempty, to allow pure synchronization?
coercions Proc 2 ;

-- Channels
ChanAddr. Chan ::= Addr ;
ChanVar.  Chan ::= Var ;

--ArgPattern. Arg ::= Pattern ;
--ArgVar.     Arg ::= Var ;
--separator nonempty Arg "," ;

PatternMatch. PMBranch ::= PPattern "=>" "{" Proc "}" ;
separator nonempty PMBranch "" ; 

-- Pattern matching
PPtWild.   PPattern2 ::= "_" ;
PPtVar.    PPattern2 ::= Var ;
PPtNil.    PPattern2 ::= "Nil" ;
--PPtInput.  PPattern ::= "for" ;
PPtOutput. PPattern1 ::= Chan "!" "(" [PPattern] ")" ;
PPtPar.    PPattern ::= PPattern "|" PPattern1 ;
PPtDrop.   PPattern1 ::= "*" Chan ;
PPtConstr. PPattern1 ::= Name "(" [PPattern] ")" ;
PPtVal.    PPattern2 ::= VPattern ;
-- PPtMatch.  PPattern ::= "match" PPattern "{" [Ident] "}" ; -- does this really make sense?
separator nonempty PPattern "," ;
coercions PPattern 2 ;

-- VPtString. VPattern ::=  ;
-- VPtArray.  VPattern ::=  ;
-- VPtList.   VPattern ::=  ;
VPtStruct. VPattern ::= Var "{" [PPattern] "}" ;
VPtAddr.   VPattern ::= "#" APattern ;

APtQuote.  APattern ::= "@" PPattern1 ;
APtVar.    APattern ::= Var ;


Choice. CBranch ::= "case" [Bind] "=>" "{" Proc "}" ;
separator nonempty CBranch "" ;

-- Variable binding
Bind. Bind ::= PPattern "<-" Chan ;
separator nonempty Bind ";" ;

-- AddrHash. Addr ::= Hash ;
AddrQuote. Addr ::= "@" Proc1 ;

VQuant.   Value    ::= Quantity ;
VEnt.     Value    ::= Entity ;
-- QBool.    Quantity ::= Boolean ;
QInt.     Quantity ::= Integer ;
QDouble.  Quantity ::= Double ;
--EAddr.    Entity   ::= "#" Addr ;
EChar.    Entity   ::= Char ;
-- EDate.    Entity   ::= Datetime ;
EStruct.  Entity   ::= Struct ;
ECollect. Entity   ::= Collect ;

Struct. Struct ::= Var "{" [Expr] "}" ;

CString. Collect ::= String ;
-- CArray.  Collect ::= Array ;
-- CList.   Collect ::= List ;