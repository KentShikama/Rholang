contract TokenBank( owners, register, getBalance ) = {
  select {
    case (pub,rtn) <- register;
      if empty(owners[pub]) => {
        new priv, get, set, balance in
  
        TokenBank( register, owners[pub] := (priv,get,set) ) |
        Cell( get, set, balance ) |
        balance!(0) |
        rtn!(priv)
    }

    case (sender,getS,setS) <- owners.values; (amount,receiver) <- sender;
      if !empty(owners[receiver]) => {
        let (_,getR,setR) = owners[receiver] in
        new rtnS, rtnR in
        
        getS!(rtnS) |
        getR!(rtnR) |
        for( balanceS <- rtnS; balanceR <- rtnR; if balanceS >= amount ) {
          setS!(balanceS-amount) | setR!(balanceR+amount)
        } |
        TokenBank( owners, register, getBalance )
    }

    case (owner,rtn) <- getBalance;
      if !empty(owners[owner]) => {
        let (_,get,_) = owners[owner] in
        get!(rtn)
    }
  }
}